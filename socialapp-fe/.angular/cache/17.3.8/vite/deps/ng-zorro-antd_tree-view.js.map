{
  "version": 3,
  "sources": ["../../../../../node_modules/ng-zorro-antd/node_modules/@angular/cdk/fesm2022/tree.mjs", "../../../../../node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-tree-view.mjs"],
  "sourcesContent": ["import { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { isObservable, Subject, BehaviorSubject, of, combineLatest, EMPTY, concat } from 'rxjs';\nimport { take, filter, takeUntil, startWith, tap, switchMap, map, reduce, concatMap, distinctUntilChanged } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Optional, inject, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, ViewChild, ContentChildren, EventEmitter, ChangeDetectorRef, booleanAttribute, Output, numberAttribute, NgModule } from '@angular/core';\nimport { TREE_KEY_MANAGER } from '@angular/cdk/a11y';\nimport * as i2 from '@angular/cdk/bidi';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceObservable } from '@angular/cdk/coercion/private';\n\n/**\n * Base tree control. It has basic toggle/expand/collapse operations on a single data node.\n *\n * @deprecated Use one of levelAccessor or childrenAccessor. To be removed in a future version.\n * @breaking-change 21.0.0\n */\nclass BaseTreeControl {\n  constructor() {\n    /** A selection model with multi-selection to track expansion status. */\n    this.expansionModel = new SelectionModel(true);\n  }\n  /** Toggles one single data node's expanded/collapsed state. */\n  toggle(dataNode) {\n    this.expansionModel.toggle(this._trackByValue(dataNode));\n  }\n  /** Expands one single data node. */\n  expand(dataNode) {\n    this.expansionModel.select(this._trackByValue(dataNode));\n  }\n  /** Collapses one single data node. */\n  collapse(dataNode) {\n    this.expansionModel.deselect(this._trackByValue(dataNode));\n  }\n  /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n  isExpanded(dataNode) {\n    return this.expansionModel.isSelected(this._trackByValue(dataNode));\n  }\n  /** Toggles a subtree rooted at `node` recursively. */\n  toggleDescendants(dataNode) {\n    this.expansionModel.isSelected(this._trackByValue(dataNode)) ? this.collapseDescendants(dataNode) : this.expandDescendants(dataNode);\n  }\n  /** Collapse all dataNodes in the tree. */\n  collapseAll() {\n    this.expansionModel.clear();\n  }\n  /** Expands a subtree rooted at given data node recursively. */\n  expandDescendants(dataNode) {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.select(...toBeProcessed.map(value => this._trackByValue(value)));\n  }\n  /** Collapses a subtree rooted at given data node recursively. */\n  collapseDescendants(dataNode) {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.deselect(...toBeProcessed.map(value => this._trackByValue(value)));\n  }\n  _trackByValue(value) {\n    return this.trackBy ? this.trackBy(value) : value;\n  }\n}\n\n/**\n * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.\n *\n * @deprecated Use one of levelAccessor or childrenAccessor instead. To be removed in a future\n * version.\n * @breaking-change 21.0.0\n */\nclass FlatTreeControl extends BaseTreeControl {\n  /** Construct with flat tree data node functions getLevel and isExpandable. */\n  constructor(getLevel, isExpandable, options) {\n    super();\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.options = options;\n    if (this.options) {\n      this.trackBy = this.options.trackBy;\n    }\n  }\n  /**\n   * Gets a list of the data node's subtree of descendent data nodes.\n   *\n   * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n   * with correct levels.\n   */\n  getDescendants(dataNode) {\n    const startIndex = this.dataNodes.indexOf(dataNode);\n    const results = [];\n    // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n    // The level of descendants of a tree node must be greater than the level of the given\n    // tree node.\n    // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n    // If we reach a node whose level is greater than the level of the tree node, we hit a\n    // sibling of an ancestor.\n    for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n      results.push(this.dataNodes[i]);\n    }\n    return results;\n  }\n  /**\n   * Expands all data nodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n   * data nodes of the tree.\n   */\n  expandAll() {\n    this.expansionModel.select(...this.dataNodes.map(node => this._trackByValue(node)));\n  }\n}\n\n/**\n * Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type.\n *\n * @deprecated Use one of levelAccessor or childrenAccessor instead. To be removed in a future\n * version.\n * @breaking-change 21.0.0\n */\nclass NestedTreeControl extends BaseTreeControl {\n  /** Construct with nested tree function getChildren. */\n  constructor(getChildren, options) {\n    super();\n    this.getChildren = getChildren;\n    this.options = options;\n    if (this.options) {\n      this.trackBy = this.options.trackBy;\n    }\n    if (this.options?.isExpandable) {\n      this.isExpandable = this.options.isExpandable;\n    }\n  }\n  /**\n   * Expands all dataNodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n   * data nodes of the tree.\n   */\n  expandAll() {\n    this.expansionModel.clear();\n    const allNodes = this.dataNodes.reduce((accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n    this.expansionModel.select(...allNodes.map(node => this._trackByValue(node)));\n  }\n  /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n  getDescendants(dataNode) {\n    const descendants = [];\n    this._getDescendants(descendants, dataNode);\n    // Remove the node itself\n    return descendants.splice(1);\n  }\n  /** A helper function to get descendants recursively. */\n  _getDescendants(descendants, dataNode) {\n    descendants.push(dataNode);\n    const childrenNodes = this.getChildren(dataNode);\n    if (Array.isArray(childrenNodes)) {\n      childrenNodes.forEach(child => this._getDescendants(descendants, child));\n    } else if (isObservable(childrenNodes)) {\n      // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n      // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n      childrenNodes.pipe(take(1), filter(Boolean)).subscribe(children => {\n        for (const child of children) {\n          this._getDescendants(descendants, child);\n        }\n      });\n    }\n  }\n}\n\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst CDK_TREE_NODE_OUTLET_NODE = new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass CdkTreeNodeOutlet {\n  constructor(viewContainer, _node) {\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  }\n  static {\n    this.ɵfac = function CdkTreeNodeOutlet_Factory(t) {\n      return new (t || CdkTreeNodeOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkTreeNodeOutlet,\n      selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeOutlet]',\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.ViewContainerRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_TREE_NODE_OUTLET_NODE]\n    }, {\n      type: Optional\n    }]\n  }], null);\n})();\n\n/** Context provided to the tree node component. */\nclass CdkTreeNodeOutletContext {\n  constructor(data) {\n    this.$implicit = data;\n  }\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass CdkTreeNodeDef {\n  /** @docs-private */\n  constructor(template) {\n    this.template = template;\n  }\n  static {\n    this.ɵfac = function CdkTreeNodeDef_Factory(t) {\n      return new (t || CdkTreeNodeDef)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkTreeNodeDef,\n      selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]],\n      inputs: {\n        when: [i0.ɵɵInputFlags.None, \"cdkTreeNodeDefWhen\", \"when\"]\n      },\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeDef]',\n      inputs: [{\n        name: 'when',\n        alias: 'cdkTreeNodeDefWhen'\n      }],\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.TemplateRef\n  }], null);\n})();\n\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nfunction getTreeNoValidDataSourceError() {\n  return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nfunction getTreeMultipleDefaultNodeDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nfunction getTreeMissingMatchingNodeDefError() {\n  return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there is no tree control.\n * @docs-private\n */\nfunction getTreeControlMissingError() {\n  return Error(`Could not find a tree control, levelAccessor, or childrenAccessor for the tree.`);\n}\n/**\n * Returns an error to be thrown when there are multiple ways of specifying children or level\n * provided to the tree.\n * @docs-private\n */\nfunction getMultipleTreeControlsError() {\n  return Error(`More than one of tree control, levelAccessor, or childrenAccessor were provided.`);\n}\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\nclass CdkTree {\n  /**\n   * Provides a stream containing the latest data array to render. Influenced by the tree's\n   * stream of view window (what dataNodes are currently on screen).\n   * Data source can be an observable of data array, or a data array to render.\n   */\n  get dataSource() {\n    return this._dataSource;\n  }\n  set dataSource(dataSource) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n  constructor(_differs, _changeDetectorRef) {\n    this._differs = _differs;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = inject(ElementRef);\n    this._dir = inject(Directionality);\n    /** Subject that emits when the component has been destroyed. */\n    this._onDestroy = new Subject();\n    /** Level of nodes */\n    this._levels = new Map();\n    /** The immediate parents for a node. This is `null` if there is no parent. */\n    this._parents = new Map();\n    /**\n     * Nodes grouped into each set, which is a list of nodes displayed together in the DOM.\n     *\n     * Lookup key is the parent of a set. Root nodes have key of null.\n     *\n     * Values is a 'set' of tree nodes. Each tree node maps to a treeitem element. Sets are in the\n     * order that it is rendered. Each set maps directly to aria-posinset and aria-setsize attributes.\n     */\n    this._ariaSets = new Map();\n    // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n    //     Remove the MAX_VALUE in viewChange\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     */\n    this.viewChange = new BehaviorSubject({\n      start: 0,\n      end: Number.MAX_VALUE\n    });\n    /**\n     * Maintain a synchronous cache of flattened data nodes. This will only be\n     * populated after initial render, and in certain cases, will be delayed due to\n     * relying on Observable `getChildren` calls.\n     */\n    this._flattenedNodes = new BehaviorSubject([]);\n    /** The automatically determined node type for the tree. */\n    this._nodeType = new BehaviorSubject(null);\n    /** The mapping between data and the node that is rendered. */\n    this._nodes = new BehaviorSubject(new Map());\n    /**\n     * Synchronous cache of nodes for the `TreeKeyManager`. This is separate\n     * from `_flattenedNodes` so they can be independently updated at different\n     * times.\n     */\n    this._keyManagerNodes = new BehaviorSubject([]);\n    this._keyManagerFactory = inject(TREE_KEY_MANAGER);\n    this._viewInit = false;\n  }\n  ngAfterContentInit() {\n    this._initializeKeyManager();\n  }\n  ngAfterContentChecked() {\n    this._updateDefaultNodeDefinition();\n    this._subscribeToDataChanges();\n  }\n  ngOnDestroy() {\n    this._nodeOutlet.viewContainer.clear();\n    this.viewChange.complete();\n    this._onDestroy.next();\n    this._onDestroy.complete();\n    if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n      this.dataSource.disconnect(this);\n    }\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n      this._dataSubscription = null;\n    }\n    // In certain tests, the tree might be destroyed before this is initialized\n    // in `ngAfterContentInit`.\n    this._keyManager?.destroy();\n  }\n  ngOnInit() {\n    this._checkTreeControlUsage();\n    this._initializeDataDiffer();\n  }\n  ngAfterViewInit() {\n    this._viewInit = true;\n  }\n  _updateDefaultNodeDefinition() {\n    const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n    if (defaultNodeDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeMultipleDefaultNodeDefsError();\n    }\n    this._defaultNodeDef = defaultNodeDefs[0];\n  }\n  /**\n   * Sets the node type for the tree, if it hasn't been set yet.\n   *\n   * This will be called by the first node that's rendered in order for the tree\n   * to determine what data transformations are required.\n   */\n  _setNodeTypeIfUnset(nodeType) {\n    if (this._nodeType.value === null) {\n      this._nodeType.next(nodeType);\n    }\n  }\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the node outlet. Otherwise start listening for new data.\n   */\n  _switchDataSource(dataSource) {\n    if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n      this.dataSource.disconnect(this);\n    }\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n      this._dataSubscription = null;\n    }\n    // Remove the all dataNodes if there is now no data source\n    if (!dataSource) {\n      this._nodeOutlet.viewContainer.clear();\n    }\n    this._dataSource = dataSource;\n    if (this._nodeDefs) {\n      this._subscribeToDataChanges();\n    }\n  }\n  _getExpansionModel() {\n    if (!this.treeControl) {\n      this._expansionModel ??= new SelectionModel(true);\n      return this._expansionModel;\n    }\n    return this.treeControl.expansionModel;\n  }\n  /** Set up a subscription for the data provided by the data source. */\n  _subscribeToDataChanges() {\n    if (this._dataSubscription) {\n      return;\n    }\n    let dataStream;\n    if (isDataSource(this._dataSource)) {\n      dataStream = this._dataSource.connect(this);\n    } else if (isObservable(this._dataSource)) {\n      dataStream = this._dataSource;\n    } else if (Array.isArray(this._dataSource)) {\n      dataStream = of(this._dataSource);\n    }\n    if (!dataStream) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        throw getTreeNoValidDataSourceError();\n      }\n      return;\n    }\n    this._dataSubscription = this._getRenderData(dataStream).pipe(takeUntil(this._onDestroy)).subscribe(renderingData => {\n      this._renderDataChanges(renderingData);\n    });\n  }\n  /** Given an Observable containing a stream of the raw data, returns an Observable containing the RenderingData */\n  _getRenderData(dataStream) {\n    const expansionModel = this._getExpansionModel();\n    return combineLatest([dataStream, this._nodeType,\n    // We don't use the expansion data directly, however we add it here to essentially\n    // trigger data rendering when expansion changes occur.\n    expansionModel.changed.pipe(startWith(null), tap(expansionChanges => {\n      this._emitExpansionChanges(expansionChanges);\n    }))]).pipe(switchMap(([data, nodeType]) => {\n      if (nodeType === null) {\n        return of({\n          renderNodes: data,\n          flattenedNodes: null,\n          nodeType\n        });\n      }\n      // If we're here, then we know what our node type is, and therefore can\n      // perform our usual rendering pipeline, which necessitates converting the data\n      return this._computeRenderingData(data, nodeType).pipe(map(convertedData => ({\n        ...convertedData,\n        nodeType\n      })));\n    }));\n  }\n  _renderDataChanges(data) {\n    if (data.nodeType === null) {\n      this.renderNodeChanges(data.renderNodes);\n      return;\n    }\n    // If we're here, then we know what our node type is, and therefore can\n    // perform our usual rendering pipeline.\n    this._updateCachedData(data.flattenedNodes);\n    this.renderNodeChanges(data.renderNodes);\n    this._updateKeyManagerItems(data.flattenedNodes);\n  }\n  _emitExpansionChanges(expansionChanges) {\n    if (!expansionChanges) {\n      return;\n    }\n    const nodes = this._nodes.value;\n    for (const added of expansionChanges.added) {\n      const node = nodes.get(added);\n      node?._emitExpansionState(true);\n    }\n    for (const removed of expansionChanges.removed) {\n      const node = nodes.get(removed);\n      node?._emitExpansionState(false);\n    }\n  }\n  _initializeKeyManager() {\n    const items = combineLatest([this._keyManagerNodes, this._nodes]).pipe(map(([keyManagerNodes, renderNodes]) => keyManagerNodes.reduce((items, data) => {\n      const node = renderNodes.get(this._getExpansionKey(data));\n      if (node) {\n        items.push(node);\n      }\n      return items;\n    }, [])));\n    const keyManagerOptions = {\n      trackBy: node => this._getExpansionKey(node.data),\n      skipPredicate: node => !!node.isDisabled,\n      typeAheadDebounceInterval: true,\n      horizontalOrientation: this._dir.value\n    };\n    this._keyManager = this._keyManagerFactory(items, keyManagerOptions);\n  }\n  _initializeDataDiffer() {\n    // Provide a default trackBy based on `_getExpansionKey` if one isn't provided.\n    const trackBy = this.trackBy ?? ((_index, item) => this._getExpansionKey(item));\n    this._dataDiffer = this._differs.find([]).create(trackBy);\n  }\n  _checkTreeControlUsage() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      // Verify that Tree follows API contract of using one of TreeControl, levelAccessor or\n      // childrenAccessor. Throw an appropriate error if contract is not met.\n      let numTreeControls = 0;\n      if (this.treeControl) {\n        numTreeControls++;\n      }\n      if (this.levelAccessor) {\n        numTreeControls++;\n      }\n      if (this.childrenAccessor) {\n        numTreeControls++;\n      }\n      if (!numTreeControls) {\n        throw getTreeControlMissingError();\n      } else if (numTreeControls > 1) {\n        throw getMultipleTreeControlsError();\n      }\n    }\n  }\n  /** Check for changes made in the data and render each change (node added/removed/moved). */\n  renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n    const changes = dataDiffer.diff(data);\n    // Some tree consumers expect change detection to propagate to nodes\n    // even when the array itself hasn't changed; we explicitly detect changes\n    // anyways in order for nodes to update their data.\n    //\n    // However, if change detection is called while the component's view is\n    // still initing, then the order of child views initing will be incorrect;\n    // to prevent this, we only exit early if the view hasn't initialized yet.\n    if (!changes && !this._viewInit) {\n      return;\n    }\n    changes?.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n      if (item.previousIndex == null) {\n        this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n      } else if (currentIndex == null) {\n        viewContainer.remove(adjustedPreviousIndex);\n      } else {\n        const view = viewContainer.get(adjustedPreviousIndex);\n        viewContainer.move(view, currentIndex);\n      }\n    });\n    // If the data itself changes, but keeps the same trackBy, we need to update the templates'\n    // context to reflect the new object.\n    changes?.forEachIdentityChange(record => {\n      const newData = record.item;\n      if (record.currentIndex != undefined) {\n        const view = viewContainer.get(record.currentIndex);\n        view.context.$implicit = newData;\n      }\n    });\n    // Note: we only `detectChanges` from a top-level call, otherwise we risk overflowing\n    // the call stack since this method is called recursively (see #29733.)\n    // TODO: change to `this._changeDetectorRef.markForCheck()`,\n    // or just switch this component to use signals.\n    if (parentData) {\n      this._changeDetectorRef.markForCheck();\n    } else {\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n  /**\n   * Finds the matching node definition that should be used for this node data. If there is only\n   * one node definition, it is returned. Otherwise, find the node definition that has a when\n   * predicate that returns true with the data. If none return true, return the default node\n   * definition.\n   */\n  _getNodeDef(data, i) {\n    if (this._nodeDefs.length === 1) {\n      return this._nodeDefs.first;\n    }\n    const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n    if (!nodeDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeMissingMatchingNodeDefError();\n    }\n    return nodeDef;\n  }\n  /**\n   * Create the embedded view for the data node template and place it in the correct index location\n   * within the data node view container.\n   */\n  insertNode(nodeData, index, viewContainer, parentData) {\n    const levelAccessor = this._getLevelAccessor();\n    const node = this._getNodeDef(nodeData, index);\n    const key = this._getExpansionKey(nodeData);\n    // Node context that will be provided to created embedded view\n    const context = new CdkTreeNodeOutletContext(nodeData);\n    parentData ??= this._parents.get(key) ?? undefined;\n    // If the tree is flat tree, then use the `getLevel` function in flat tree control\n    // Otherwise, use the level of parent node.\n    if (levelAccessor) {\n      context.level = levelAccessor(nodeData);\n    } else if (parentData !== undefined && this._levels.has(this._getExpansionKey(parentData))) {\n      context.level = this._levels.get(this._getExpansionKey(parentData)) + 1;\n    } else {\n      context.level = 0;\n    }\n    this._levels.set(key, context.level);\n    // Use default tree nodeOutlet, or nested node's nodeOutlet\n    const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n    container.createEmbeddedView(node.template, context, index);\n    // Set the data to just created `CdkTreeNode`.\n    // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n    //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n    if (CdkTreeNode.mostRecentTreeNode) {\n      CdkTreeNode.mostRecentTreeNode.data = nodeData;\n    }\n  }\n  /** Whether the data node is expanded or collapsed. Returns true if it's expanded. */\n  isExpanded(dataNode) {\n    return !!(this.treeControl?.isExpanded(dataNode) || this._expansionModel?.isSelected(this._getExpansionKey(dataNode)));\n  }\n  /** If the data node is currently expanded, collapse it. Otherwise, expand it. */\n  toggle(dataNode) {\n    if (this.treeControl) {\n      this.treeControl.toggle(dataNode);\n    } else if (this._expansionModel) {\n      this._expansionModel.toggle(this._getExpansionKey(dataNode));\n    }\n  }\n  /** Expand the data node. If it is already expanded, does nothing. */\n  expand(dataNode) {\n    if (this.treeControl) {\n      this.treeControl.expand(dataNode);\n    } else if (this._expansionModel) {\n      this._expansionModel.select(this._getExpansionKey(dataNode));\n    }\n  }\n  /** Collapse the data node. If it is already collapsed, does nothing. */\n  collapse(dataNode) {\n    if (this.treeControl) {\n      this.treeControl.collapse(dataNode);\n    } else if (this._expansionModel) {\n      this._expansionModel.deselect(this._getExpansionKey(dataNode));\n    }\n  }\n  /**\n   * If the data node is currently expanded, collapse it and all its descendants.\n   * Otherwise, expand it and all its descendants.\n   */\n  toggleDescendants(dataNode) {\n    if (this.treeControl) {\n      this.treeControl.toggleDescendants(dataNode);\n    } else if (this._expansionModel) {\n      if (this.isExpanded(dataNode)) {\n        this.collapseDescendants(dataNode);\n      } else {\n        this.expandDescendants(dataNode);\n      }\n    }\n  }\n  /**\n   * Expand the data node and all its descendants. If they are already expanded, does nothing.\n   */\n  expandDescendants(dataNode) {\n    if (this.treeControl) {\n      this.treeControl.expandDescendants(dataNode);\n    } else if (this._expansionModel) {\n      const expansionModel = this._expansionModel;\n      expansionModel.select(this._getExpansionKey(dataNode));\n      this._getDescendants(dataNode).pipe(take(1), takeUntil(this._onDestroy)).subscribe(children => {\n        expansionModel.select(...children.map(child => this._getExpansionKey(child)));\n      });\n    }\n  }\n  /** Collapse the data node and all its descendants. If it is already collapsed, does nothing. */\n  collapseDescendants(dataNode) {\n    if (this.treeControl) {\n      this.treeControl.collapseDescendants(dataNode);\n    } else if (this._expansionModel) {\n      const expansionModel = this._expansionModel;\n      expansionModel.deselect(this._getExpansionKey(dataNode));\n      this._getDescendants(dataNode).pipe(take(1), takeUntil(this._onDestroy)).subscribe(children => {\n        expansionModel.deselect(...children.map(child => this._getExpansionKey(child)));\n      });\n    }\n  }\n  /** Expands all data nodes in the tree. */\n  expandAll() {\n    if (this.treeControl) {\n      this.treeControl.expandAll();\n    } else if (this._expansionModel) {\n      const expansionModel = this._expansionModel;\n      expansionModel.select(...this._flattenedNodes.value.map(child => this._getExpansionKey(child)));\n    }\n  }\n  /** Collapse all data nodes in the tree. */\n  collapseAll() {\n    if (this.treeControl) {\n      this.treeControl.collapseAll();\n    } else if (this._expansionModel) {\n      const expansionModel = this._expansionModel;\n      expansionModel.deselect(...this._flattenedNodes.value.map(child => this._getExpansionKey(child)));\n    }\n  }\n  /** Level accessor, used for compatibility between the old Tree and new Tree */\n  _getLevelAccessor() {\n    return this.treeControl?.getLevel?.bind(this.treeControl) ?? this.levelAccessor;\n  }\n  /** Children accessor, used for compatibility between the old Tree and new Tree */\n  _getChildrenAccessor() {\n    return this.treeControl?.getChildren?.bind(this.treeControl) ?? this.childrenAccessor;\n  }\n  /**\n   * Gets the direct children of a node; used for compatibility between the old tree and the\n   * new tree.\n   */\n  _getDirectChildren(dataNode) {\n    const levelAccessor = this._getLevelAccessor();\n    const expansionModel = this._expansionModel ?? this.treeControl?.expansionModel;\n    if (!expansionModel) {\n      return of([]);\n    }\n    const key = this._getExpansionKey(dataNode);\n    const isExpanded = expansionModel.changed.pipe(switchMap(changes => {\n      if (changes.added.includes(key)) {\n        return of(true);\n      } else if (changes.removed.includes(key)) {\n        return of(false);\n      }\n      return EMPTY;\n    }), startWith(this.isExpanded(dataNode)));\n    if (levelAccessor) {\n      return combineLatest([isExpanded, this._flattenedNodes]).pipe(map(([expanded, flattenedNodes]) => {\n        if (!expanded) {\n          return [];\n        }\n        return this._findChildrenByLevel(levelAccessor, flattenedNodes, dataNode, 1);\n      }));\n    }\n    const childrenAccessor = this._getChildrenAccessor();\n    if (childrenAccessor) {\n      return coerceObservable(childrenAccessor(dataNode) ?? []);\n    }\n    throw getTreeControlMissingError();\n  }\n  /**\n   * Given the list of flattened nodes, the level accessor, and the level range within\n   * which to consider children, finds the children for a given node.\n   *\n   * For example, for direct children, `levelDelta` would be 1. For all descendants,\n   * `levelDelta` would be Infinity.\n   */\n  _findChildrenByLevel(levelAccessor, flattenedNodes, dataNode, levelDelta) {\n    const key = this._getExpansionKey(dataNode);\n    const startIndex = flattenedNodes.findIndex(node => this._getExpansionKey(node) === key);\n    const dataNodeLevel = levelAccessor(dataNode);\n    const expectedLevel = dataNodeLevel + levelDelta;\n    const results = [];\n    // Goes through flattened tree nodes in the `flattenedNodes` array, and get all\n    // descendants within a certain level range.\n    //\n    // If we reach a node whose level is equal to or less than the level of the tree node,\n    // we hit a sibling or parent's sibling, and should stop.\n    for (let i = startIndex + 1; i < flattenedNodes.length; i++) {\n      const currentLevel = levelAccessor(flattenedNodes[i]);\n      if (currentLevel <= dataNodeLevel) {\n        break;\n      }\n      if (currentLevel <= expectedLevel) {\n        results.push(flattenedNodes[i]);\n      }\n    }\n    return results;\n  }\n  /**\n   * Adds the specified node component to the tree's internal registry.\n   *\n   * This primarily facilitates keyboard navigation.\n   */\n  _registerNode(node) {\n    this._nodes.value.set(this._getExpansionKey(node.data), node);\n    this._nodes.next(this._nodes.value);\n  }\n  /** Removes the specified node component from the tree's internal registry. */\n  _unregisterNode(node) {\n    this._nodes.value.delete(this._getExpansionKey(node.data));\n    this._nodes.next(this._nodes.value);\n  }\n  /**\n   * For the given node, determine the level where this node appears in the tree.\n   *\n   * This is intended to be used for `aria-level` but is 0-indexed.\n   */\n  _getLevel(node) {\n    return this._levels.get(this._getExpansionKey(node));\n  }\n  /**\n   * For the given node, determine the size of the parent's child set.\n   *\n   * This is intended to be used for `aria-setsize`.\n   */\n  _getSetSize(dataNode) {\n    const set = this._getAriaSet(dataNode);\n    return set.length;\n  }\n  /**\n   * For the given node, determine the index (starting from 1) of the node in its parent's child set.\n   *\n   * This is intended to be used for `aria-posinset`.\n   */\n  _getPositionInSet(dataNode) {\n    const set = this._getAriaSet(dataNode);\n    const key = this._getExpansionKey(dataNode);\n    return set.findIndex(node => this._getExpansionKey(node) === key) + 1;\n  }\n  /** Given a CdkTreeNode, gets the node that renders that node's parent's data. */\n  _getNodeParent(node) {\n    const parent = this._parents.get(this._getExpansionKey(node.data));\n    return parent && this._nodes.value.get(this._getExpansionKey(parent));\n  }\n  /** Given a CdkTreeNode, gets the nodes that renders that node's child data. */\n  _getNodeChildren(node) {\n    return this._getDirectChildren(node.data).pipe(map(children => children.reduce((nodes, child) => {\n      const value = this._nodes.value.get(this._getExpansionKey(child));\n      if (value) {\n        nodes.push(value);\n      }\n      return nodes;\n    }, [])));\n  }\n  /** `keydown` event handler; this just passes the event to the `TreeKeyManager`. */\n  _sendKeydownToKeyManager(event) {\n    // Only handle events directly on the tree or directly on one of the nodes, otherwise\n    // we risk interfering with events in the projected content (see #29828).\n    if (event.target === this._elementRef.nativeElement) {\n      this._keyManager.onKeydown(event);\n    } else {\n      const nodes = this._nodes.getValue();\n      for (const [, node] of nodes) {\n        if (event.target === node._elementRef.nativeElement) {\n          this._keyManager.onKeydown(event);\n          break;\n        }\n      }\n    }\n  }\n  /** Gets all nested descendants of a given node. */\n  _getDescendants(dataNode) {\n    if (this.treeControl) {\n      return of(this.treeControl.getDescendants(dataNode));\n    }\n    if (this.levelAccessor) {\n      const results = this._findChildrenByLevel(this.levelAccessor, this._flattenedNodes.value, dataNode, Infinity);\n      return of(results);\n    }\n    if (this.childrenAccessor) {\n      return this._getAllChildrenRecursively(dataNode).pipe(reduce((allChildren, nextChildren) => {\n        allChildren.push(...nextChildren);\n        return allChildren;\n      }, []));\n    }\n    throw getTreeControlMissingError();\n  }\n  /**\n   * Gets all children and sub-children of the provided node.\n   *\n   * This will emit multiple times, in the order that the children will appear\n   * in the tree, and can be combined with a `reduce` operator.\n   */\n  _getAllChildrenRecursively(dataNode) {\n    if (!this.childrenAccessor) {\n      return of([]);\n    }\n    return coerceObservable(this.childrenAccessor(dataNode)).pipe(take(1), switchMap(children => {\n      // Here, we cache the parents of a particular child so that we can compute the levels.\n      for (const child of children) {\n        this._parents.set(this._getExpansionKey(child), dataNode);\n      }\n      return of(...children).pipe(concatMap(child => concat(of([child]), this._getAllChildrenRecursively(child))));\n    }));\n  }\n  _getExpansionKey(dataNode) {\n    // In the case that a key accessor function was not provided by the\n    // tree user, we'll default to using the node object itself as the key.\n    //\n    // This cast is safe since:\n    // - if an expansionKey is provided, TS will infer the type of K to be\n    //   the return type.\n    // - if it's not, then K will be defaulted to T.\n    return this.expansionKey?.(dataNode) ?? dataNode;\n  }\n  _getAriaSet(node) {\n    const key = this._getExpansionKey(node);\n    const parent = this._parents.get(key);\n    const parentKey = parent ? this._getExpansionKey(parent) : null;\n    const set = this._ariaSets.get(parentKey);\n    return set ?? [node];\n  }\n  /**\n   * Finds the parent for the given node. If this is a root node, this\n   * returns null. If we're unable to determine the parent, for example,\n   * if we don't have cached node data, this returns undefined.\n   */\n  _findParentForNode(node, index, cachedNodes) {\n    // In all cases, we have a mapping from node to level; all we need to do here is backtrack in\n    // our flattened list of nodes to determine the first node that's of a level lower than the\n    // provided node.\n    if (!cachedNodes.length) {\n      return null;\n    }\n    const currentLevel = this._levels.get(this._getExpansionKey(node)) ?? 0;\n    for (let parentIndex = index - 1; parentIndex >= 0; parentIndex--) {\n      const parentNode = cachedNodes[parentIndex];\n      const parentLevel = this._levels.get(this._getExpansionKey(parentNode)) ?? 0;\n      if (parentLevel < currentLevel) {\n        return parentNode;\n      }\n    }\n    return null;\n  }\n  /**\n   * Given a set of root nodes and the current node level, flattens any nested\n   * nodes into a single array.\n   *\n   * If any nodes are not expanded, then their children will not be added into the array.\n   * This will still traverse all nested children in order to build up our internal data\n   * models, but will not include them in the returned array.\n   */\n  _flattenNestedNodesWithExpansion(nodes, level = 0) {\n    const childrenAccessor = this._getChildrenAccessor();\n    // If we're using a level accessor, we don't need to flatten anything.\n    if (!childrenAccessor) {\n      return of([...nodes]);\n    }\n    return of(...nodes).pipe(concatMap(node => {\n      const parentKey = this._getExpansionKey(node);\n      if (!this._parents.has(parentKey)) {\n        this._parents.set(parentKey, null);\n      }\n      this._levels.set(parentKey, level);\n      const children = coerceObservable(childrenAccessor(node));\n      return concat(of([node]), children.pipe(take(1), tap(childNodes => {\n        this._ariaSets.set(parentKey, [...(childNodes ?? [])]);\n        for (const child of childNodes ?? []) {\n          const childKey = this._getExpansionKey(child);\n          this._parents.set(childKey, node);\n          this._levels.set(childKey, level + 1);\n        }\n      }), switchMap(childNodes => {\n        if (!childNodes) {\n          return of([]);\n        }\n        return this._flattenNestedNodesWithExpansion(childNodes, level + 1).pipe(map(nestedNodes => this.isExpanded(node) ? nestedNodes : []));\n      })));\n    }), reduce((results, children) => {\n      results.push(...children);\n      return results;\n    }, []));\n  }\n  /**\n   * Converts children for certain tree configurations.\n   *\n   * This also computes parent, level, and group data.\n   */\n  _computeRenderingData(nodes, nodeType) {\n    // The only situations where we have to convert children types is when\n    // they're mismatched; i.e. if the tree is using a childrenAccessor and the\n    // nodes are flat, or if the tree is using a levelAccessor and the nodes are\n    // nested.\n    if (this.childrenAccessor && nodeType === 'flat') {\n      // This flattens children into a single array.\n      this._ariaSets.set(null, [...nodes]);\n      return this._flattenNestedNodesWithExpansion(nodes).pipe(map(flattenedNodes => ({\n        renderNodes: flattenedNodes,\n        flattenedNodes\n      })));\n    } else if (this.levelAccessor && nodeType === 'nested') {\n      // In the nested case, we only look for root nodes. The CdkNestedNode\n      // itself will handle rendering each individual node's children.\n      const levelAccessor = this.levelAccessor;\n      return of(nodes.filter(node => levelAccessor(node) === 0)).pipe(map(rootNodes => ({\n        renderNodes: rootNodes,\n        flattenedNodes: nodes\n      })), tap(({\n        flattenedNodes\n      }) => {\n        this._calculateParents(flattenedNodes);\n      }));\n    } else if (nodeType === 'flat') {\n      // In the case of a TreeControl, we know that the node type matches up\n      // with the TreeControl, and so no conversions are necessary. Otherwise,\n      // we've already confirmed that the data model matches up with the\n      // desired node type here.\n      return of({\n        renderNodes: nodes,\n        flattenedNodes: nodes\n      }).pipe(tap(({\n        flattenedNodes\n      }) => {\n        this._calculateParents(flattenedNodes);\n      }));\n    } else {\n      // For nested nodes, we still need to perform the node flattening in order\n      // to maintain our caches for various tree operations.\n      this._ariaSets.set(null, [...nodes]);\n      return this._flattenNestedNodesWithExpansion(nodes).pipe(map(flattenedNodes => ({\n        renderNodes: nodes,\n        flattenedNodes\n      })));\n    }\n  }\n  _updateCachedData(flattenedNodes) {\n    this._flattenedNodes.next(flattenedNodes);\n  }\n  _updateKeyManagerItems(flattenedNodes) {\n    this._keyManagerNodes.next(flattenedNodes);\n  }\n  /** Traverse the flattened node data and compute parents, levels, and group data. */\n  _calculateParents(flattenedNodes) {\n    const levelAccessor = this._getLevelAccessor();\n    if (!levelAccessor) {\n      return;\n    }\n    this._parents.clear();\n    this._ariaSets.clear();\n    for (let index = 0; index < flattenedNodes.length; index++) {\n      const dataNode = flattenedNodes[index];\n      const key = this._getExpansionKey(dataNode);\n      this._levels.set(key, levelAccessor(dataNode));\n      const parent = this._findParentForNode(dataNode, index, flattenedNodes);\n      this._parents.set(key, parent);\n      const parentKey = parent ? this._getExpansionKey(parent) : null;\n      const group = this._ariaSets.get(parentKey) ?? [];\n      group.splice(index, 0, dataNode);\n      this._ariaSets.set(parentKey, group);\n    }\n  }\n  static {\n    this.ɵfac = function CdkTree_Factory(t) {\n      return new (t || CdkTree)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: CdkTree,\n      selectors: [[\"cdk-tree\"]],\n      contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n        }\n      },\n      viewQuery: function CdkTree_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(CdkTreeNodeOutlet, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n        }\n      },\n      hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"],\n      hostBindings: function CdkTree_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"keydown\", function CdkTree_keydown_HostBindingHandler($event) {\n            return ctx._sendKeydownToKeyManager($event);\n          });\n        }\n      },\n      inputs: {\n        dataSource: \"dataSource\",\n        treeControl: \"treeControl\",\n        levelAccessor: \"levelAccessor\",\n        childrenAccessor: \"childrenAccessor\",\n        trackBy: \"trackBy\",\n        expansionKey: \"expansionKey\"\n      },\n      exportAs: [\"cdkTree\"],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 1,\n      vars: 0,\n      consts: [[\"cdkTreeNodeOutlet\", \"\"]],\n      template: function CdkTree_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementContainer(0, 0);\n        }\n      },\n      dependencies: [CdkTreeNodeOutlet],\n      encapsulation: 2\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTree, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-tree',\n      exportAs: 'cdkTree',\n      template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n      host: {\n        'class': 'cdk-tree',\n        'role': 'tree',\n        '(keydown)': '_sendKeydownToKeyManager($event)'\n      },\n      encapsulation: ViewEncapsulation.None,\n      // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n      // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n      // declared elsewhere, they are checked when their declaration points are checked.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      standalone: true,\n      imports: [CdkTreeNodeOutlet]\n    }]\n  }], () => [{\n    type: i0.IterableDiffers\n  }, {\n    type: i0.ChangeDetectorRef\n  }], {\n    dataSource: [{\n      type: Input\n    }],\n    treeControl: [{\n      type: Input\n    }],\n    levelAccessor: [{\n      type: Input\n    }],\n    childrenAccessor: [{\n      type: Input\n    }],\n    trackBy: [{\n      type: Input\n    }],\n    expansionKey: [{\n      type: Input\n    }],\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [CdkTreeNodeOutlet, {\n        static: true\n      }]\n    }],\n    _nodeDefs: [{\n      type: ContentChildren,\n      args: [CdkTreeNodeDef, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\nclass CdkTreeNode {\n  /**\n   * The role of the tree node.\n   *\n   * @deprecated This will be ignored; the tree will automatically determine the appropriate role\n   * for tree node. This input will be removed in a future version.\n   * @breaking-change 21.0.0\n   */\n  get role() {\n    return 'treeitem';\n  }\n  set role(_role) {\n    // ignore any role setting, we handle this internally.\n  }\n  /**\n   * Whether or not this node is expandable.\n   *\n   * If not using `FlatTreeControl`, or if `isExpandable` is not provided to\n   * `NestedTreeControl`, this should be provided for correct node a11y.\n   */\n  get isExpandable() {\n    return this._isExpandable();\n  }\n  set isExpandable(isExpandable) {\n    this._inputIsExpandable = isExpandable;\n    if (this.data && !this._isExpandable || !this._inputIsExpandable) {\n      return;\n    }\n    // If the node is being set to expandable, ensure that the status of the\n    // node is propagated\n    if (this._inputIsExpanded) {\n      this.expand();\n    } else if (this._inputIsExpanded === false) {\n      this.collapse();\n    }\n  }\n  get isExpanded() {\n    return this._tree.isExpanded(this._data);\n  }\n  set isExpanded(isExpanded) {\n    this._inputIsExpanded = isExpanded;\n    if (isExpanded) {\n      this.expand();\n    } else {\n      this.collapse();\n    }\n  }\n  getLabel() {\n    return this.typeaheadLabel || this._elementRef.nativeElement.textContent?.trim() || '';\n  }\n  /**\n   * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n   * in `CdkTree` and set the data to it.\n   */\n  static {\n    this.mostRecentTreeNode = null;\n  }\n  /** The tree node's data. */\n  get data() {\n    return this._data;\n  }\n  set data(value) {\n    if (value !== this._data) {\n      this._data = value;\n      this._dataChanges.next();\n    }\n  }\n  /* If leaf node, return true to not assign aria-expanded attribute */\n  get isLeafNode() {\n    // If flat tree node data returns false for expandable property, it's a leaf node\n    if (this._tree.treeControl?.isExpandable !== undefined && !this._tree.treeControl.isExpandable(this._data)) {\n      return true;\n      // If nested tree node data returns 0 descendants, it's a leaf node\n    } else if (this._tree.treeControl?.isExpandable === undefined && this._tree.treeControl?.getDescendants(this._data).length === 0) {\n      return true;\n    }\n    return false;\n  }\n  get level() {\n    // If the tree has a levelAccessor, use it to get the level. Otherwise read the\n    // aria-level off the parent node and use it as the level for this node (note aria-level is\n    // 1-indexed, while this property is 0-indexed, so we don't need to increment).\n    return this._tree._getLevel(this._data) ?? this._parentNodeAriaLevel;\n  }\n  /** Determines if the tree node is expandable. */\n  _isExpandable() {\n    if (this._tree.treeControl) {\n      if (this.isLeafNode) {\n        return false;\n      }\n      // For compatibility with trees created using TreeControl before we added\n      // CdkTreeNode#isExpandable.\n      return true;\n    }\n    return this._inputIsExpandable;\n  }\n  /**\n   * Determines the value for `aria-expanded`.\n   *\n   * For non-expandable nodes, this is `null`.\n   */\n  _getAriaExpanded() {\n    if (!this._isExpandable()) {\n      return null;\n    }\n    return String(this.isExpanded);\n  }\n  /**\n   * Determines the size of this node's parent's child set.\n   *\n   * This is intended to be used for `aria-setsize`.\n   */\n  _getSetSize() {\n    return this._tree._getSetSize(this._data);\n  }\n  /**\n   * Determines the index (starting from 1) of this node in its parent's child set.\n   *\n   * This is intended to be used for `aria-posinset`.\n   */\n  _getPositionInSet() {\n    return this._tree._getPositionInSet(this._data);\n  }\n  constructor(_elementRef, _tree) {\n    this._elementRef = _elementRef;\n    this._tree = _tree;\n    this._tabindex = -1;\n    /** This emits when the node has been programatically activated or activated by keyboard. */\n    this.activation = new EventEmitter();\n    /** This emits when the node's expansion status has been changed. */\n    this.expandedChange = new EventEmitter();\n    /** Subject that emits when the component has been destroyed. */\n    this._destroyed = new Subject();\n    /** Emits when the node's data has changed. */\n    this._dataChanges = new Subject();\n    this._inputIsExpandable = false;\n    this._inputIsExpanded = undefined;\n    /**\n     * Flag used to determine whether or not we should be focusing the actual element based on\n     * some user interaction (click or focus). On click, we don't forcibly focus the element\n     * since the click could trigger some other component that wants to grab its own focus\n     * (e.g. menu, dialog).\n     */\n    this._shouldFocus = true;\n    this._changeDetectorRef = inject(ChangeDetectorRef);\n    CdkTreeNode.mostRecentTreeNode = this;\n  }\n  ngOnInit() {\n    this._parentNodeAriaLevel = getParentNodeAriaLevel(this._elementRef.nativeElement);\n    this._tree._getExpansionModel().changed.pipe(map(() => this.isExpanded), distinctUntilChanged()).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n    this._tree._setNodeTypeIfUnset('flat');\n    this._tree._registerNode(this);\n  }\n  ngOnDestroy() {\n    // If this is the last tree node being destroyed,\n    // clear out the reference to avoid leaking memory.\n    if (CdkTreeNode.mostRecentTreeNode === this) {\n      CdkTreeNode.mostRecentTreeNode = null;\n    }\n    this._dataChanges.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  getParent() {\n    return this._tree._getNodeParent(this) ?? null;\n  }\n  getChildren() {\n    return this._tree._getNodeChildren(this);\n  }\n  /** Focuses this data node. Implemented for TreeKeyManagerItem. */\n  focus() {\n    this._tabindex = 0;\n    if (this._shouldFocus) {\n      this._elementRef.nativeElement.focus();\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Defocus this data node. */\n  unfocus() {\n    this._tabindex = -1;\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Emits an activation event. Implemented for TreeKeyManagerItem. */\n  activate() {\n    if (this.isDisabled) {\n      return;\n    }\n    this.activation.next(this._data);\n  }\n  /** Collapses this data node. Implemented for TreeKeyManagerItem. */\n  collapse() {\n    if (this.isExpandable) {\n      this._tree.collapse(this._data);\n    }\n  }\n  /** Expands this data node. Implemented for TreeKeyManagerItem. */\n  expand() {\n    if (this.isExpandable) {\n      this._tree.expand(this._data);\n    }\n  }\n  /** Makes the node focusable. Implemented for TreeKeyManagerItem. */\n  makeFocusable() {\n    this._tabindex = 0;\n    this._changeDetectorRef.markForCheck();\n  }\n  _focusItem() {\n    if (this.isDisabled) {\n      return;\n    }\n    this._tree._keyManager.focusItem(this);\n  }\n  _setActiveItem() {\n    if (this.isDisabled) {\n      return;\n    }\n    this._shouldFocus = false;\n    this._tree._keyManager.focusItem(this);\n    this._shouldFocus = true;\n  }\n  _emitExpansionState(expanded) {\n    this.expandedChange.emit(expanded);\n  }\n  static {\n    this.ɵfac = function CdkTreeNode_Factory(t) {\n      return new (t || CdkTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(CdkTree));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkTreeNode,\n      selectors: [[\"cdk-tree-node\"]],\n      hostAttrs: [\"role\", \"treeitem\", 1, \"cdk-tree-node\"],\n      hostVars: 5,\n      hostBindings: function CdkTreeNode_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function CdkTreeNode_click_HostBindingHandler() {\n            return ctx._setActiveItem();\n          })(\"focus\", function CdkTreeNode_focus_HostBindingHandler() {\n            return ctx._focusItem();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"tabindex\", ctx._tabindex);\n          i0.ɵɵattribute(\"aria-expanded\", ctx._getAriaExpanded())(\"aria-level\", ctx.level + 1)(\"aria-posinset\", ctx._getPositionInSet())(\"aria-setsize\", ctx._getSetSize());\n        }\n      },\n      inputs: {\n        role: \"role\",\n        isExpandable: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"isExpandable\", \"isExpandable\", booleanAttribute],\n        isExpanded: \"isExpanded\",\n        isDisabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"isDisabled\", \"isDisabled\", booleanAttribute],\n        typeaheadLabel: [i0.ɵɵInputFlags.None, \"cdkTreeNodeTypeaheadLabel\", \"typeaheadLabel\"]\n      },\n      outputs: {\n        activation: \"activation\",\n        expandedChange: \"expandedChange\"\n      },\n      exportAs: [\"cdkTreeNode\"],\n      standalone: true,\n      features: [i0.ɵɵInputTransformsFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-tree-node',\n      exportAs: 'cdkTreeNode',\n      host: {\n        'class': 'cdk-tree-node',\n        '[attr.aria-expanded]': '_getAriaExpanded()',\n        '[attr.aria-level]': 'level + 1',\n        '[attr.aria-posinset]': '_getPositionInSet()',\n        '[attr.aria-setsize]': '_getSetSize()',\n        '[tabindex]': '_tabindex',\n        'role': 'treeitem',\n        '(click)': '_setActiveItem()',\n        '(focus)': '_focusItem()'\n      },\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: CdkTree\n  }], {\n    role: [{\n      type: Input\n    }],\n    isExpandable: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    isExpanded: [{\n      type: Input\n    }],\n    isDisabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    typeaheadLabel: [{\n      type: Input,\n      args: ['cdkTreeNodeTypeaheadLabel']\n    }],\n    activation: [{\n      type: Output\n    }],\n    expandedChange: [{\n      type: Output\n    }]\n  });\n})();\nfunction getParentNodeAriaLevel(nodeElement) {\n  let parent = nodeElement.parentElement;\n  while (parent && !isNodeElement(parent)) {\n    parent = parent.parentElement;\n  }\n  if (!parent) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw Error('Incorrect tree structure containing detached node.');\n    } else {\n      return -1;\n    }\n  } else if (parent.classList.contains('cdk-nested-tree-node')) {\n    return numberAttribute(parent.getAttribute('aria-level'));\n  } else {\n    // The ancestor element is the cdk-tree itself\n    return 0;\n  }\n}\nfunction isNodeElement(element) {\n  const classList = element.classList;\n  return !!(classList?.contains('cdk-nested-tree-node') || classList?.contains('cdk-tree'));\n}\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n */\nclass CdkNestedTreeNode extends CdkTreeNode {\n  constructor(elementRef, tree, _differs) {\n    super(elementRef, tree);\n    this._differs = _differs;\n  }\n  ngAfterContentInit() {\n    this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n    this._tree._getDirectChildren(this.data).pipe(takeUntil(this._destroyed)).subscribe(result => this.updateChildrenNodes(result));\n    this.nodeOutlet.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateChildrenNodes());\n  }\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  ngOnInit() {\n    this._tree._setNodeTypeIfUnset('nested');\n    super.ngOnInit();\n  }\n  ngOnDestroy() {\n    this._clear();\n    super.ngOnDestroy();\n  }\n  /** Add children dataNodes to the NodeOutlet */\n  updateChildrenNodes(children) {\n    const outlet = this._getNodeOutlet();\n    if (children) {\n      this._children = children;\n    }\n    if (outlet && this._children) {\n      const viewContainer = outlet.viewContainer;\n      this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n    } else {\n      // Reset the data differ if there's no children nodes displayed\n      this._dataDiffer.diff([]);\n    }\n  }\n  /** Clear the children dataNodes. */\n  _clear() {\n    const outlet = this._getNodeOutlet();\n    if (outlet) {\n      outlet.viewContainer.clear();\n      this._dataDiffer.diff([]);\n    }\n  }\n  /** Gets the outlet for the current node. */\n  _getNodeOutlet() {\n    const outlets = this.nodeOutlet;\n    // Note that since we use `descendants: true` on the query, we have to ensure\n    // that we don't pick up the outlet of a child node by accident.\n    return outlets && outlets.find(outlet => !outlet._node || outlet._node === this);\n  }\n  static {\n    this.ɵfac = function CdkNestedTreeNode_Factory(t) {\n      return new (t || CdkNestedTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(CdkTree), i0.ɵɵdirectiveInject(i0.IterableDiffers));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkNestedTreeNode,\n      selectors: [[\"cdk-nested-tree-node\"]],\n      contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n        }\n      },\n      hostAttrs: [1, \"cdk-nested-tree-node\"],\n      exportAs: [\"cdkNestedTreeNode\"],\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: CdkTreeNode,\n        useExisting: CdkNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: CdkNestedTreeNode\n      }]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-nested-tree-node',\n      exportAs: 'cdkNestedTreeNode',\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: CdkNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: CdkNestedTreeNode\n      }],\n      host: {\n        'class': 'cdk-nested-tree-node'\n      },\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: CdkTree\n  }, {\n    type: i0.IterableDiffers\n  }], {\n    nodeOutlet: [{\n      type: ContentChildren,\n      args: [CdkTreeNodeOutlet, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }]\n  });\n})();\n\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\nclass CdkTreeNodePadding {\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  get level() {\n    return this._level;\n  }\n  set level(value) {\n    this._setLevelInput(value);\n  }\n  /**\n   * The indent for each level. Can be a number or a CSS string.\n   * Default number 40px from material design menu sub-menu spec.\n   */\n  get indent() {\n    return this._indent;\n  }\n  set indent(indent) {\n    this._setIndentInput(indent);\n  }\n  constructor(_treeNode, _tree, _element, _dir) {\n    this._treeNode = _treeNode;\n    this._tree = _tree;\n    this._element = _element;\n    this._dir = _dir;\n    /** Subject that emits when the component has been destroyed. */\n    this._destroyed = new Subject();\n    /** CSS units used for the indentation value. */\n    this.indentUnits = 'px';\n    this._indent = 40;\n    this._setPadding();\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding(true));\n    }\n    // In Ivy the indentation binding might be set before the tree node's data has been added,\n    // which means that we'll miss the first render. We have to subscribe to changes in the\n    // data to ensure that everything is up to date.\n    _treeNode._dataChanges.subscribe(() => this._setPadding());\n  }\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n  _paddingIndent() {\n    const nodeLevel = (this._treeNode.data && this._tree._getLevel(this._treeNode.data)) ?? null;\n    const level = this._level == null ? nodeLevel : this._level;\n    return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n  }\n  _setPadding(forceChange = false) {\n    const padding = this._paddingIndent();\n    if (padding !== this._currentPadding || forceChange) {\n      const element = this._element.nativeElement;\n      const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n      const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n      element.style[paddingProp] = padding || '';\n      element.style[resetProp] = '';\n      this._currentPadding = padding;\n    }\n  }\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n  _setLevelInput(value) {\n    // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n    // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n    // they set 0 explicitly.\n    this._level = isNaN(value) ? null : value;\n    this._setPadding();\n  }\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n  _setIndentInput(indent) {\n    let value = indent;\n    let units = 'px';\n    if (typeof indent === 'string') {\n      const parts = indent.split(cssUnitPattern);\n      value = parts[0];\n      units = parts[1] || units;\n    }\n    this.indentUnits = units;\n    this._indent = numberAttribute(value);\n    this._setPadding();\n  }\n  static {\n    this.ɵfac = function CdkTreeNodePadding_Factory(t) {\n      return new (t || CdkTreeNodePadding)(i0.ɵɵdirectiveInject(CdkTreeNode), i0.ɵɵdirectiveInject(CdkTree), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkTreeNodePadding,\n      selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]],\n      inputs: {\n        level: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"cdkTreeNodePadding\", \"level\", numberAttribute],\n        indent: [i0.ɵɵInputFlags.None, \"cdkTreeNodePaddingIndent\", \"indent\"]\n      },\n      standalone: true,\n      features: [i0.ɵɵInputTransformsFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodePadding]',\n      standalone: true\n    }]\n  }], () => [{\n    type: CdkTreeNode\n  }, {\n    type: CdkTree\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i2.Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }], {\n    level: [{\n      type: Input,\n      args: [{\n        alias: 'cdkTreeNodePadding',\n        transform: numberAttribute\n      }]\n    }],\n    indent: [{\n      type: Input,\n      args: ['cdkTreeNodePaddingIndent']\n    }]\n  });\n})();\n\n/**\n * Node toggle to expand and collapse the node.\n */\nclass CdkTreeNodeToggle {\n  constructor(_tree, _treeNode) {\n    this._tree = _tree;\n    this._treeNode = _treeNode;\n    /** Whether expand/collapse the node recursively. */\n    this.recursive = false;\n  }\n  // Toggle the expanded or collapsed state of this node.\n  //\n  // Focus this node with expanding or collapsing it. This ensures that the active node will always\n  // be visible when expanding and collapsing.\n  _toggle() {\n    this.recursive ? this._tree.toggleDescendants(this._treeNode.data) : this._tree.toggle(this._treeNode.data);\n    this._tree._keyManager.focusItem(this._treeNode);\n  }\n  static {\n    this.ɵfac = function CdkTreeNodeToggle_Factory(t) {\n      return new (t || CdkTreeNodeToggle)(i0.ɵɵdirectiveInject(CdkTree), i0.ɵɵdirectiveInject(CdkTreeNode));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkTreeNodeToggle,\n      selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]],\n      hostAttrs: [\"tabindex\", \"-1\"],\n      hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) {\n            ctx._toggle();\n            return $event.stopPropagation();\n          })(\"keydown.Enter\", function CdkTreeNodeToggle_keydown_Enter_HostBindingHandler($event) {\n            ctx._toggle();\n            return $event.preventDefault();\n          })(\"keydown.Space\", function CdkTreeNodeToggle_keydown_Space_HostBindingHandler($event) {\n            ctx._toggle();\n            return $event.preventDefault();\n          });\n        }\n      },\n      inputs: {\n        recursive: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"cdkTreeNodeToggleRecursive\", \"recursive\", booleanAttribute]\n      },\n      standalone: true,\n      features: [i0.ɵɵInputTransformsFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeToggle]',\n      host: {\n        '(click)': '_toggle(); $event.stopPropagation();',\n        '(keydown.Enter)': '_toggle(); $event.preventDefault();',\n        '(keydown.Space)': '_toggle(); $event.preventDefault();',\n        'tabindex': '-1'\n      },\n      standalone: true\n    }]\n  }], () => [{\n    type: CdkTree\n  }, {\n    type: CdkTreeNode\n  }], {\n    recursive: [{\n      type: Input,\n      args: [{\n        alias: 'cdkTreeNodeToggleRecursive',\n        transform: booleanAttribute\n      }]\n    }]\n  });\n})();\nconst EXPORTED_DECLARATIONS = [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\nclass CdkTreeModule {\n  static {\n    this.ɵfac = function CdkTreeModule_Factory(t) {\n      return new (t || CdkTreeModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: CdkTreeModule,\n      imports: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet],\n      exports: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: EXPORTED_DECLARATIONS,\n      exports: EXPORTED_DECLARATIONS\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getMultipleTreeControlsError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError };\n", "import * as i0 from '@angular/core';\nimport { EventEmitter, booleanAttribute, Component, ChangeDetectionStrategy, Input, Output, inject, Directive, numberAttribute, ViewEncapsulation, ViewChild, NgModule } from '@angular/core';\nimport { fromEvent, Subject, animationFrameScheduler, asapScheduler, merge, BehaviorSubject } from 'rxjs';\nimport { takeUntil, auditTime, filter, take, map } from 'rxjs/operators';\nimport * as i1 from 'ng-zorro-antd/core/services';\nimport { NzDestroyService } from 'ng-zorro-antd/core/services';\nimport { CdkTreeNode, CdkTree, CdkTreeNodeToggle, CdkTreeNodeDef, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet, CdkTreeNodePadding, CdkTreeNodeOutletContext } from '@angular/cdk/tree';\nimport { NzNoAnimationDirective } from 'ng-zorro-antd/core/no-animation';\nimport * as i1$1 from '@angular/cdk/bidi';\nimport { treeCollapseMotion } from 'ng-zorro-antd/core/animation';\nimport { CdkVirtualScrollViewport, CdkVirtualForOf, CdkFixedSizeVirtualScroll } from '@angular/cdk/scrolling';\nimport { DataSource } from '@angular/cdk/collections';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nfunction NzTreeNodeIndentsComponent_For_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 1);\n  }\n  if (rf & 2) {\n    const isEnd_r1 = ctx.$implicit;\n    i0.ɵɵclassProp(\"ant-tree-indent-unit-end\", !isEnd_r1);\n  }\n}\nconst _c0 = [[[\"nz-tree-node-toggle\"], [\"\", \"nz-tree-node-toggle\", \"\"]], [[\"nz-tree-node-checkbox\"]], [[\"nz-tree-node-option\"]], \"*\"];\nconst _c1 = [\"nz-tree-node-toggle, [nz-tree-node-toggle]\", \"nz-tree-node-checkbox\", \"nz-tree-node-option\", \"*\"];\nfunction NzTreeNodeComponent_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"nz-tree-node-indents\", 0);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"indents\", ctx_r0.indents);\n  }\n}\nfunction NzTreeNodeComponent_Conditional_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"nz-tree-node-toggle\", 1);\n    i0.ɵɵelement(1, \"span\", 2);\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c2 = [\"*\"];\nfunction NzTreeVirtualScrollViewComponent_ng_container_2_ng_template_1_Template(rf, ctx) {}\nfunction NzTreeVirtualScrollViewComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTreeVirtualScrollViewComponent_ng_container_2_ng_template_1_Template, 0, 0, \"ng-template\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"data\", item_r1)(\"compareBy\", ctx_r1.compareBy);\n  }\n}\nclass NzTreeNodeCheckboxComponent {\n  constructor(ngZone, ref, host, destroy$) {\n    this.ngZone = ngZone;\n    this.ref = ref;\n    this.host = host;\n    this.destroy$ = destroy$;\n    this.nzClick = new EventEmitter();\n  }\n  ngOnInit() {\n    this.ngZone.runOutsideAngular(() => fromEvent(this.host.nativeElement, 'click').pipe(takeUntil(this.destroy$)).subscribe(event => {\n      if (!this.nzDisabled && this.nzClick.observers.length) {\n        this.ngZone.run(() => {\n          this.nzClick.emit(event);\n          this.ref.markForCheck();\n        });\n      }\n    }));\n  }\n  static {\n    this.ɵfac = function NzTreeNodeCheckboxComponent_Factory(t) {\n      return new (t || NzTreeNodeCheckboxComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.NzDestroyService));\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NzTreeNodeCheckboxComponent,\n      selectors: [[\"nz-tree-node-checkbox\", 3, \"builtin\", \"\"]],\n      hostAttrs: [1, \"ant-tree-checkbox\"],\n      hostVars: 6,\n      hostBindings: function NzTreeNodeCheckboxComponent_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"ant-tree-checkbox-checked\", ctx.nzChecked)(\"ant-tree-checkbox-indeterminate\", ctx.nzIndeterminate)(\"ant-tree-checkbox-disabled\", ctx.nzDisabled);\n        }\n      },\n      inputs: {\n        nzChecked: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"nzChecked\", \"nzChecked\", booleanAttribute],\n        nzIndeterminate: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"nzIndeterminate\", \"nzIndeterminate\", booleanAttribute],\n        nzDisabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"nzDisabled\", \"nzDisabled\", booleanAttribute]\n      },\n      outputs: {\n        nzClick: \"nzClick\"\n      },\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([NzDestroyService]), i0.ɵɵInputTransformsFeature, i0.ɵɵStandaloneFeature],\n      decls: 1,\n      vars: 0,\n      consts: [[1, \"ant-tree-checkbox-inner\"]],\n      template: function NzTreeNodeCheckboxComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"span\", 0);\n        }\n      },\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeCheckboxComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node-checkbox:not([builtin])',\n      template: ` <span class=\"ant-tree-checkbox-inner\"></span> `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      preserveWhitespaces: false,\n      host: {\n        class: 'ant-tree-checkbox',\n        '[class.ant-tree-checkbox-checked]': `nzChecked`,\n        '[class.ant-tree-checkbox-indeterminate]': `nzIndeterminate`,\n        '[class.ant-tree-checkbox-disabled]': `nzDisabled`\n      },\n      providers: [NzDestroyService],\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.NgZone\n  }, {\n    type: i0.ChangeDetectorRef\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i1.NzDestroyService\n  }], {\n    nzChecked: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    nzIndeterminate: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    nzDisabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    nzClick: [{\n      type: Output\n    }]\n  });\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst getParent = (nodes, node, getLevel) => {\n  let index = nodes.indexOf(node);\n  if (index < 0) {\n    return null;\n  }\n  const level = getLevel(node);\n  for (index--; index >= 0; index--) {\n    const preLevel = getLevel(nodes[index]);\n    if (preLevel + 1 === level) {\n      return nodes[index];\n    }\n    if (preLevel + 1 < level) {\n      return null;\n    }\n  }\n  return null;\n};\nconst getNextSibling = (nodes, node, getLevel, _index) => {\n  let index = typeof _index !== 'undefined' ? _index : nodes.indexOf(node);\n  if (index < 0) {\n    return null;\n  }\n  const level = getLevel(node);\n  for (index++; index < nodes.length; index++) {\n    const nextLevel = getLevel(nodes[index]);\n    if (nextLevel < level) {\n      return null;\n    }\n    if (nextLevel === level) {\n      return nodes[index];\n    }\n  }\n  return null;\n};\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzNodeBase extends CdkTreeNode {}\n\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nclass NzTreeView extends CdkTree {\n  get dataSource() {\n    return super.dataSource;\n  }\n  set dataSource(dataSource) {\n    super.dataSource = dataSource;\n  }\n  constructor(differs, changeDetectorRef, directionality) {\n    super(differs, changeDetectorRef, directionality);\n    this.differs = differs;\n    this.changeDetectorRef = changeDetectorRef;\n    this.directionality = directionality;\n    this.destroy$ = new Subject();\n    this.dir = 'ltr';\n    this._dataSourceChanged = new Subject();\n    this.nzDirectoryTree = false;\n    this.nzBlockNode = false;\n    this.noAnimation = inject(NzNoAnimationDirective, {\n      host: true,\n      optional: true\n    });\n  }\n  ngOnInit() {\n    super.ngOnInit();\n    this.dir = this.directionality.value;\n    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n      this.dir = direction;\n      this.changeDetectorRef.detectChanges();\n    });\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n  renderNodeChanges(data, dataDiffer, viewContainer, parentData) {\n    super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n    this._dataSourceChanged.next();\n  }\n  static {\n    this.ɵfac = function NzTreeView_Factory(t) {\n      return new (t || NzTreeView)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1$1.Directionality));\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NzTreeView,\n      selectors: [[\"ng-component\"]],\n      inputs: {\n        treeControl: [i0.ɵɵInputFlags.None, \"nzTreeControl\", \"treeControl\"],\n        dataSource: [i0.ɵɵInputFlags.None, \"nzDataSource\", \"dataSource\"],\n        nzDirectoryTree: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"nzDirectoryTree\", \"nzDirectoryTree\", booleanAttribute],\n        nzBlockNode: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"nzBlockNode\", \"nzBlockNode\", booleanAttribute]\n      },\n      standalone: true,\n      features: [i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n      decls: 0,\n      vars: 0,\n      template: function NzTreeView_Template(rf, ctx) {},\n      encapsulation: 2\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeView, [{\n    type: Component,\n    args: [{\n      template: '',\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.IterableDiffers\n  }, {\n    type: i0.ChangeDetectorRef\n  }, {\n    type: i1$1.Directionality\n  }], {\n    treeControl: [{\n      type: Input,\n      args: ['nzTreeControl']\n    }],\n    dataSource: [{\n      type: Input,\n      args: ['nzDataSource']\n    }],\n    nzDirectoryTree: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    nzBlockNode: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }]\n  });\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n/**\n * [true, false, false, true] => 1001\n */\nfunction booleanArrayToString(arr) {\n  return arr.map(i => i ? 1 : 0).join('');\n}\nconst BUILD_INDENTS_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\nclass NzTreeNodeIndentsComponent {\n  constructor() {\n    this.indents = [];\n  }\n  static {\n    this.ɵfac = function NzTreeNodeIndentsComponent_Factory(t) {\n      return new (t || NzTreeNodeIndentsComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NzTreeNodeIndentsComponent,\n      selectors: [[\"nz-tree-node-indents\"]],\n      hostAttrs: [1, \"ant-tree-indent\"],\n      inputs: {\n        indents: \"indents\"\n      },\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 2,\n      vars: 0,\n      consts: [[1, \"ant-tree-indent-unit\", 3, \"ant-tree-indent-unit-end\"], [1, \"ant-tree-indent-unit\"]],\n      template: function NzTreeNodeIndentsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵrepeaterCreate(0, NzTreeNodeIndentsComponent_For_1_Template, 1, 2, \"span\", 0, i0.ɵɵrepeaterTrackByIdentity);\n        }\n        if (rf & 2) {\n          i0.ɵɵrepeater(ctx.indents);\n        }\n      },\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeIndentsComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node-indents',\n      template: `\n    @for (isEnd of indents; track isEnd) {\n      <span class=\"ant-tree-indent-unit\" [class.ant-tree-indent-unit-end]=\"!isEnd\"></span>\n    }\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'ant-tree-indent'\n      },\n      standalone: true\n    }]\n  }], null, {\n    indents: [{\n      type: Input\n    }]\n  });\n})();\nclass NzTreeNodeIndentLineDirective {\n  constructor(treeNode, tree, cdr) {\n    this.treeNode = treeNode;\n    this.tree = tree;\n    this.cdr = cdr;\n    this.isLast = 'unset';\n    this.isLeaf = false;\n    this.preNodeRef = null;\n    this.nextNodeRef = null;\n    this.currentIndents = '';\n    this.buildIndents();\n    this.checkLast();\n    /**\n     * The dependent data (TreeControl.dataNodes) can be set after node instantiation,\n     * and setting the indents can cause frame rate loss if it is set too often.\n     */\n    this.changeSubscription = merge(this.treeNode._dataChanges, tree._dataSourceChanged).pipe(auditTime(0, BUILD_INDENTS_SCHEDULER)).subscribe(() => {\n      this.buildIndents();\n      this.checkAdjacent();\n      this.cdr.markForCheck();\n    });\n  }\n  getIndents() {\n    const indents = [];\n    const nodes = this.tree.treeControl.dataNodes;\n    const getLevel = this.tree.treeControl.getLevel;\n    let parent = getParent(nodes, this.treeNode.data, getLevel);\n    while (parent) {\n      const parentNextSibling = getNextSibling(nodes, parent, getLevel);\n      if (parentNextSibling) {\n        indents.unshift(true);\n      } else {\n        indents.unshift(false);\n      }\n      parent = getParent(nodes, parent, getLevel);\n    }\n    return indents;\n  }\n  buildIndents() {\n    if (this.treeNode.data) {\n      const indents = this.getIndents();\n      const diffString = booleanArrayToString(indents);\n      if (diffString !== this.currentIndents) {\n        this.treeNode.setIndents(this.getIndents());\n        this.currentIndents = diffString;\n      }\n    }\n  }\n  /**\n   * We need to add an class name for the last child node,\n   * this result can also be affected when the adjacent nodes are changed.\n   */\n  checkAdjacent() {\n    const nodes = this.tree.treeControl.dataNodes;\n    const index = nodes.indexOf(this.treeNode.data);\n    const preNode = nodes[index - 1] || null;\n    const nextNode = nodes[index + 1] || null;\n    if (this.nextNodeRef !== nextNode || this.preNodeRef !== preNode) {\n      this.checkLast(index);\n    }\n    this.preNodeRef = preNode;\n    this.nextNodeRef = nextNode;\n  }\n  checkLast(index) {\n    const nodes = this.tree.treeControl.dataNodes;\n    this.isLeaf = this.treeNode.isLeaf;\n    this.isLast = !getNextSibling(nodes, this.treeNode.data, this.tree.treeControl.getLevel, index);\n  }\n  ngOnDestroy() {\n    this.preNodeRef = null;\n    this.nextNodeRef = null;\n    this.changeSubscription.unsubscribe();\n  }\n  static {\n    this.ɵfac = function NzTreeNodeIndentLineDirective_Factory(t) {\n      return new (t || NzTreeNodeIndentLineDirective)(i0.ɵɵdirectiveInject(NzNodeBase), i0.ɵɵdirectiveInject(NzTreeView), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NzTreeNodeIndentLineDirective,\n      selectors: [[\"nz-tree-node\", \"nzTreeNodeIndentLine\", \"\"]],\n      hostAttrs: [1, \"ant-tree-show-line\"],\n      hostVars: 2,\n      hostBindings: function NzTreeNodeIndentLineDirective_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"ant-tree-treenode-leaf-last\", ctx.isLast && ctx.isLeaf);\n        }\n      },\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeIndentLineDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'nz-tree-node[nzTreeNodeIndentLine]',\n      host: {\n        class: 'ant-tree-show-line',\n        '[class.ant-tree-treenode-leaf-last]': 'isLast && isLeaf'\n      },\n      standalone: true\n    }]\n  }], () => [{\n    type: NzNodeBase\n  }, {\n    type: NzTreeView\n  }, {\n    type: i0.ChangeDetectorRef\n  }], null);\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeNodeNoopToggleDirective {\n  static {\n    this.ɵfac = function NzTreeNodeNoopToggleDirective_Factory(t) {\n      return new (t || NzTreeNodeNoopToggleDirective)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NzTreeNodeNoopToggleDirective,\n      selectors: [[\"nz-tree-node-toggle\", \"nzTreeNodeNoopToggle\", \"\"], [\"\", \"nzTreeNodeNoopToggle\", \"\"]],\n      hostAttrs: [1, \"ant-tree-switcher\", \"ant-tree-switcher-noop\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeNoopToggleDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'nz-tree-node-toggle[nzTreeNodeNoopToggle], [nzTreeNodeNoopToggle]',\n      host: {\n        class: 'ant-tree-switcher ant-tree-switcher-noop'\n      },\n      standalone: true\n    }]\n  }], null, null);\n})();\nclass NzTreeNodeToggleDirective extends CdkTreeNodeToggle {\n  constructor() {\n    super(...arguments);\n    this.recursive = false;\n  }\n  get isExpanded() {\n    return this._treeNode.isExpanded;\n  }\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵNzTreeNodeToggleDirective_BaseFactory;\n      return function NzTreeNodeToggleDirective_Factory(t) {\n        return (ɵNzTreeNodeToggleDirective_BaseFactory || (ɵNzTreeNodeToggleDirective_BaseFactory = i0.ɵɵgetInheritedFactory(NzTreeNodeToggleDirective)))(t || NzTreeNodeToggleDirective);\n      };\n    })();\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NzTreeNodeToggleDirective,\n      selectors: [[\"nz-tree-node-toggle\", 3, \"nzTreeNodeNoopToggle\", \"\"], [\"\", \"nzTreeNodeToggle\", \"\"]],\n      hostAttrs: [1, \"ant-tree-switcher\"],\n      hostVars: 4,\n      hostBindings: function NzTreeNodeToggleDirective_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"ant-tree-switcher_open\", ctx.isExpanded)(\"ant-tree-switcher_close\", !ctx.isExpanded);\n        }\n      },\n      inputs: {\n        recursive: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"nzTreeNodeToggleRecursive\", \"recursive\", booleanAttribute]\n      },\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: CdkTreeNodeToggle,\n        useExisting: NzTreeNodeToggleDirective\n      }]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeToggleDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'nz-tree-node-toggle:not([nzTreeNodeNoopToggle]), [nzTreeNodeToggle]',\n      providers: [{\n        provide: CdkTreeNodeToggle,\n        useExisting: NzTreeNodeToggleDirective\n      }],\n      host: {\n        class: 'ant-tree-switcher',\n        '[class.ant-tree-switcher_open]': 'isExpanded',\n        '[class.ant-tree-switcher_close]': '!isExpanded'\n      },\n      standalone: true\n    }]\n  }], null, {\n    recursive: [{\n      type: Input,\n      args: [{\n        alias: 'nzTreeNodeToggleRecursive',\n        transform: booleanAttribute\n      }]\n    }]\n  });\n})();\nclass NzTreeNodeToggleRotateIconDirective {\n  static {\n    this.ɵfac = function NzTreeNodeToggleRotateIconDirective_Factory(t) {\n      return new (t || NzTreeNodeToggleRotateIconDirective)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NzTreeNodeToggleRotateIconDirective,\n      selectors: [[\"\", \"nz-icon\", \"\", \"nzTreeNodeToggleRotateIcon\", \"\"]],\n      hostAttrs: [1, \"ant-tree-switcher-icon\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeToggleRotateIconDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nz-icon][nzTreeNodeToggleRotateIcon]',\n      host: {\n        class: 'ant-tree-switcher-icon'\n      },\n      standalone: true\n    }]\n  }], null, null);\n})();\nclass NzTreeNodeToggleActiveIconDirective {\n  static {\n    this.ɵfac = function NzTreeNodeToggleActiveIconDirective_Factory(t) {\n      return new (t || NzTreeNodeToggleActiveIconDirective)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NzTreeNodeToggleActiveIconDirective,\n      selectors: [[\"\", \"nz-icon\", \"\", \"nzTreeNodeToggleActiveIcon\", \"\"]],\n      hostAttrs: [1, \"ant-tree-switcher-loading-icon\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeToggleActiveIconDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nz-icon][nzTreeNodeToggleActiveIcon]',\n      host: {\n        class: 'ant-tree-switcher-loading-icon'\n      },\n      standalone: true\n    }]\n  }], null, null);\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeNodeComponent extends NzNodeBase {\n  constructor(elementRef, tree, renderer, cdr) {\n    super(elementRef, tree);\n    this.elementRef = elementRef;\n    this.tree = tree;\n    this.renderer = renderer;\n    this.cdr = cdr;\n    this.indents = [];\n    this.disabled = false;\n    this.selected = false;\n    this.isLeaf = false;\n    this._elementRef.nativeElement.classList.add('ant-tree-treenode');\n  }\n  ngOnInit() {\n    this.isLeaf = !this.tree.treeControl.isExpandable(this.data);\n  }\n  disable() {\n    this.disabled = true;\n    this.updateDisabledClass();\n  }\n  enable() {\n    this.disabled = false;\n    this.updateDisabledClass();\n  }\n  select() {\n    this.selected = true;\n    this.updateSelectedClass();\n  }\n  deselect() {\n    this.selected = false;\n    this.updateSelectedClass();\n  }\n  setIndents(indents) {\n    this.indents = indents;\n    this.cdr.markForCheck();\n  }\n  updateSelectedClass() {\n    if (this.selected) {\n      this.renderer.addClass(this.elementRef.nativeElement, 'ant-tree-treenode-selected');\n    } else {\n      this.renderer.removeClass(this.elementRef.nativeElement, 'ant-tree-treenode-selected');\n    }\n  }\n  updateDisabledClass() {\n    if (this.disabled) {\n      this.renderer.addClass(this.elementRef.nativeElement, 'ant-tree-treenode-disabled');\n    } else {\n      this.renderer.removeClass(this.elementRef.nativeElement, 'ant-tree-treenode-disabled');\n    }\n  }\n  static {\n    this.ɵfac = function NzTreeNodeComponent_Factory(t) {\n      return new (t || NzTreeNodeComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(NzTreeView), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NzTreeNodeComponent,\n      selectors: [[\"nz-tree-node\", 3, \"builtin\", \"\"]],\n      hostVars: 4,\n      hostBindings: function NzTreeNodeComponent_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"ant-tree-treenode-switcher-open\", ctx.isExpanded)(\"ant-tree-treenode-switcher-close\", !ctx.isExpanded);\n        }\n      },\n      exportAs: [\"nzTreeNode\"],\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: CdkTreeNode,\n        useExisting: NzTreeNodeComponent\n      }, {\n        provide: NzNodeBase,\n        useExisting: NzTreeNodeComponent\n      }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n      ngContentSelectors: _c1,\n      decls: 6,\n      vars: 2,\n      consts: [[3, \"indents\"], [\"nzTreeNodeNoopToggle\", \"\", 1, \"nz-tree-leaf-line-icon\"], [1, \"ant-tree-switcher-leaf-line\"]],\n      template: function NzTreeNodeComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef(_c0);\n          i0.ɵɵtemplate(0, NzTreeNodeComponent_Conditional_0_Template, 1, 1, \"nz-tree-node-indents\", 0);\n          i0.ɵɵprojection(1);\n          i0.ɵɵtemplate(2, NzTreeNodeComponent_Conditional_2_Template, 2, 0, \"nz-tree-node-toggle\", 1);\n          i0.ɵɵprojection(3, 1);\n          i0.ɵɵprojection(4, 2);\n          i0.ɵɵprojection(5, 3);\n        }\n        if (rf & 2) {\n          i0.ɵɵconditional(0, ctx.indents.length ? 0 : -1);\n          i0.ɵɵadvance(2);\n          i0.ɵɵconditional(2, ctx.indents.length && ctx.isLeaf ? 2 : -1);\n        }\n      },\n      dependencies: [NzTreeNodeIndentsComponent, NzTreeNodeNoopToggleDirective],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node:not([builtin])',\n      exportAs: 'nzTreeNode',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: NzTreeNodeComponent\n      }, {\n        provide: NzNodeBase,\n        useExisting: NzTreeNodeComponent\n      }],\n      template: `\n    @if (indents.length) {\n      <nz-tree-node-indents [indents]=\"indents\"></nz-tree-node-indents>\n    }\n    <ng-content select=\"nz-tree-node-toggle, [nz-tree-node-toggle]\"></ng-content>\n    @if (indents.length && isLeaf) {\n      <nz-tree-node-toggle class=\"nz-tree-leaf-line-icon\" nzTreeNodeNoopToggle>\n        <span class=\"ant-tree-switcher-leaf-line\"></span>\n      </nz-tree-node-toggle>\n    }\n    <ng-content select=\"nz-tree-node-checkbox\"></ng-content>\n    <ng-content select=\"nz-tree-node-option\"></ng-content>\n    <ng-content></ng-content>\n  `,\n      host: {\n        '[class.ant-tree-treenode-switcher-open]': 'isExpanded',\n        '[class.ant-tree-treenode-switcher-close]': '!isExpanded'\n      },\n      imports: [NzTreeNodeIndentsComponent, NzTreeNodeNoopToggleDirective],\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: NzTreeView\n  }, {\n    type: i0.Renderer2\n  }, {\n    type: i0.ChangeDetectorRef\n  }], null);\n})();\nclass NzTreeNodeDefDirective extends CdkTreeNodeDef {\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵNzTreeNodeDefDirective_BaseFactory;\n      return function NzTreeNodeDefDirective_Factory(t) {\n        return (ɵNzTreeNodeDefDirective_BaseFactory || (ɵNzTreeNodeDefDirective_BaseFactory = i0.ɵɵgetInheritedFactory(NzTreeNodeDefDirective)))(t || NzTreeNodeDefDirective);\n      };\n    })();\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NzTreeNodeDefDirective,\n      selectors: [[\"\", \"nzTreeNodeDef\", \"\"]],\n      inputs: {\n        when: [i0.ɵɵInputFlags.None, \"nzTreeNodeDefWhen\", \"when\"]\n      },\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: CdkTreeNodeDef,\n        useExisting: NzTreeNodeDefDirective\n      }]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeDefDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nzTreeNodeDef]',\n      providers: [{\n        provide: CdkTreeNodeDef,\n        useExisting: NzTreeNodeDefDirective\n      }],\n      standalone: true\n    }]\n  }], null, {\n    when: [{\n      type: Input,\n      args: ['nzTreeNodeDefWhen']\n    }]\n  });\n})();\nclass NzTreeVirtualScrollNodeOutletDirective {\n  constructor(_viewContainerRef) {\n    this._viewContainerRef = _viewContainerRef;\n    this._viewRef = null;\n  }\n  ngOnChanges(changes) {\n    const recreateView = this.shouldRecreateView(changes);\n    if (recreateView) {\n      const viewContainerRef = this._viewContainerRef;\n      if (this._viewRef) {\n        viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));\n      }\n      this._viewRef = this.data ? viewContainerRef.createEmbeddedView(this.data.nodeDef.template, this.data.context) : null;\n      if (CdkTreeNode.mostRecentTreeNode && this._viewRef) {\n        CdkTreeNode.mostRecentTreeNode.data = this.data.data;\n      }\n    } else if (this._viewRef && this.data.context) {\n      this.updateExistingContext(this.data.context);\n    }\n  }\n  shouldRecreateView(changes) {\n    const ctxChange = changes.data;\n    return ctxChange && this.hasContextShapeChanged(ctxChange);\n  }\n  hasContextShapeChanged(ctxChange) {\n    const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n    const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n    if (prevCtxKeys.length === currCtxKeys.length) {\n      for (const propName of currCtxKeys) {\n        if (prevCtxKeys.indexOf(propName) === -1) {\n          return true;\n        }\n      }\n      return this.innerCompareBy(ctxChange.previousValue?.data ?? null) !== this.innerCompareBy(ctxChange.currentValue?.data ?? null);\n    }\n    return true;\n  }\n  get innerCompareBy() {\n    return value => {\n      if (value === null) return value;\n      if (this.compareBy) return this.compareBy(value);\n      return value;\n    };\n  }\n  updateExistingContext(ctx) {\n    for (const propName of Object.keys(ctx)) {\n      this._viewRef.context[propName] = this.data.context[propName];\n    }\n  }\n  static {\n    this.ɵfac = function NzTreeVirtualScrollNodeOutletDirective_Factory(t) {\n      return new (t || NzTreeVirtualScrollNodeOutletDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NzTreeVirtualScrollNodeOutletDirective,\n      selectors: [[\"\", \"nzTreeVirtualScrollNodeOutlet\", \"\"]],\n      inputs: {\n        data: \"data\",\n        compareBy: \"compareBy\"\n      },\n      standalone: true,\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeVirtualScrollNodeOutletDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nzTreeVirtualScrollNodeOutlet]',\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.ViewContainerRef\n  }], {\n    data: [{\n      type: Input\n    }],\n    compareBy: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeNodeOptionComponent {\n  constructor(ngZone, host, destroy$, treeNode) {\n    this.ngZone = ngZone;\n    this.host = host;\n    this.destroy$ = destroy$;\n    this.treeNode = treeNode;\n    this.nzSelected = false;\n    this.nzDisabled = false;\n    this.nzClick = new EventEmitter();\n  }\n  get isExpanded() {\n    return this.treeNode.isExpanded;\n  }\n  ngOnChanges(changes) {\n    const {\n      nzDisabled,\n      nzSelected\n    } = changes;\n    if (nzDisabled) {\n      if (nzDisabled.currentValue) {\n        this.treeNode.disable();\n      } else {\n        this.treeNode.enable();\n      }\n    }\n    if (nzSelected) {\n      if (nzSelected.currentValue) {\n        this.treeNode.select();\n      } else {\n        this.treeNode.deselect();\n      }\n    }\n  }\n  ngOnInit() {\n    this.ngZone.runOutsideAngular(() => fromEvent(this.host.nativeElement, 'click').pipe(filter(() => !this.nzDisabled && this.nzClick.observers.length > 0), takeUntil(this.destroy$)).subscribe(event => {\n      this.ngZone.run(() => this.nzClick.emit(event));\n    }));\n  }\n  static {\n    this.ɵfac = function NzTreeNodeOptionComponent_Factory(t) {\n      return new (t || NzTreeNodeOptionComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.NzDestroyService), i0.ɵɵdirectiveInject(NzTreeNodeComponent));\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NzTreeNodeOptionComponent,\n      selectors: [[\"nz-tree-node-option\"]],\n      hostAttrs: [1, \"ant-tree-node-content-wrapper\"],\n      hostVars: 4,\n      hostBindings: function NzTreeNodeOptionComponent_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"ant-tree-node-content-wrapper-open\", ctx.isExpanded)(\"ant-tree-node-selected\", ctx.nzSelected);\n        }\n      },\n      inputs: {\n        nzSelected: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"nzSelected\", \"nzSelected\", booleanAttribute],\n        nzDisabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"nzDisabled\", \"nzDisabled\", booleanAttribute]\n      },\n      outputs: {\n        nzClick: \"nzClick\"\n      },\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([NzDestroyService]), i0.ɵɵInputTransformsFeature, i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n      ngContentSelectors: _c2,\n      decls: 2,\n      vars: 0,\n      consts: [[1, \"ant-tree-title\"]],\n      template: function NzTreeNodeOptionComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵelementStart(0, \"span\", 0);\n          i0.ɵɵprojection(1);\n          i0.ɵɵelementEnd();\n        }\n      },\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeOptionComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node-option',\n      template: ` <span class=\"ant-tree-title\"><ng-content></ng-content></span> `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'ant-tree-node-content-wrapper',\n        '[class.ant-tree-node-content-wrapper-open]': 'isExpanded',\n        '[class.ant-tree-node-selected]': 'nzSelected'\n      },\n      providers: [NzDestroyService],\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.NgZone\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i1.NzDestroyService\n  }, {\n    type: NzTreeNodeComponent\n  }], {\n    nzSelected: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    nzDisabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    nzClick: [{\n      type: Output\n    }]\n  });\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeNodeOutletDirective {\n  constructor(viewContainer) {\n    this.viewContainer = viewContainer;\n    this._node = inject(CDK_TREE_NODE_OUTLET_NODE, {\n      optional: true\n    });\n  }\n  static {\n    this.ɵfac = function NzTreeNodeOutletDirective_Factory(t) {\n      return new (t || NzTreeNodeOutletDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NzTreeNodeOutletDirective,\n      selectors: [[\"\", \"nzTreeNodeOutlet\", \"\"]],\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: CdkTreeNodeOutlet,\n        useExisting: NzTreeNodeOutletDirective\n      }])]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodeOutletDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nzTreeNodeOutlet]',\n      providers: [{\n        provide: CdkTreeNodeOutlet,\n        useExisting: NzTreeNodeOutletDirective\n      }],\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.ViewContainerRef\n  }], null);\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeNodePaddingDirective extends CdkTreeNodePadding {\n  constructor() {\n    super(...arguments);\n    this._indent = 24;\n  }\n  get level() {\n    return this._level;\n  }\n  set level(value) {\n    this._setLevelInput(value);\n  }\n  get indent() {\n    return this._indent;\n  }\n  set indent(indent) {\n    this._setIndentInput(indent);\n  }\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵNzTreeNodePaddingDirective_BaseFactory;\n      return function NzTreeNodePaddingDirective_Factory(t) {\n        return (ɵNzTreeNodePaddingDirective_BaseFactory || (ɵNzTreeNodePaddingDirective_BaseFactory = i0.ɵɵgetInheritedFactory(NzTreeNodePaddingDirective)))(t || NzTreeNodePaddingDirective);\n      };\n    })();\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NzTreeNodePaddingDirective,\n      selectors: [[\"\", \"nzTreeNodePadding\", \"\"]],\n      inputs: {\n        level: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"nzTreeNodePadding\", \"level\", numberAttribute],\n        indent: [i0.ɵɵInputFlags.None, \"nzTreeNodePaddingIndent\", \"indent\"]\n      },\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: CdkTreeNodePadding,\n        useExisting: NzTreeNodePaddingDirective\n      }]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeNodePaddingDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nzTreeNodePadding]',\n      providers: [{\n        provide: CdkTreeNodePadding,\n        useExisting: NzTreeNodePaddingDirective\n      }],\n      standalone: true\n    }]\n  }], null, {\n    level: [{\n      type: Input,\n      args: [{\n        alias: 'nzTreeNodePadding',\n        transform: numberAttribute\n      }]\n    }],\n    indent: [{\n      type: Input,\n      args: ['nzTreeNodePaddingIndent']\n    }]\n  });\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeViewComponent extends NzTreeView {\n  constructor() {\n    super(...arguments);\n    this._afterViewInit = false;\n  }\n  ngAfterViewInit() {\n    Promise.resolve().then(() => {\n      this._afterViewInit = true;\n      this.changeDetectorRef.markForCheck();\n    });\n  }\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵNzTreeViewComponent_BaseFactory;\n      return function NzTreeViewComponent_Factory(t) {\n        return (ɵNzTreeViewComponent_BaseFactory || (ɵNzTreeViewComponent_BaseFactory = i0.ɵɵgetInheritedFactory(NzTreeViewComponent)))(t || NzTreeViewComponent);\n      };\n    })();\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NzTreeViewComponent,\n      selectors: [[\"nz-tree-view\"]],\n      viewQuery: function NzTreeViewComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(NzTreeNodeOutletDirective, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t.first);\n        }\n      },\n      hostAttrs: [1, \"ant-tree\"],\n      hostVars: 6,\n      hostBindings: function NzTreeViewComponent_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"ant-tree-block-node\", ctx.nzDirectoryTree || ctx.nzBlockNode)(\"ant-tree-directory\", ctx.nzDirectoryTree)(\"ant-tree-rtl\", ctx.dir === \"rtl\");\n        }\n      },\n      exportAs: [\"nzTreeView\"],\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: CdkTree,\n        useExisting: NzTreeViewComponent\n      }, {\n        provide: NzTreeView,\n        useExisting: NzTreeViewComponent\n      }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n      decls: 3,\n      vars: 2,\n      consts: [[1, \"ant-tree-list-holder\"], [1, \"ant-tree-list-holder-inner\"], [\"nzTreeNodeOutlet\", \"\"]],\n      template: function NzTreeViewComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n          i0.ɵɵelementContainer(2, 2);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"@.disabled\", !ctx._afterViewInit || !!(ctx.noAnimation == null ? null : ctx.noAnimation.nzNoAnimation))(\"@treeCollapseMotion\", ctx._nodeOutlet.viewContainer.length);\n        }\n      },\n      dependencies: [NzTreeNodeOutletDirective],\n      encapsulation: 2,\n      data: {\n        animation: [treeCollapseMotion]\n      },\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeViewComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-view',\n      exportAs: 'nzTreeView',\n      template: `\n    <div class=\"ant-tree-list-holder\">\n      <div\n        [@.disabled]=\"!_afterViewInit || !!noAnimation?.nzNoAnimation\"\n        [@treeCollapseMotion]=\"_nodeOutlet.viewContainer.length\"\n        class=\"ant-tree-list-holder-inner\"\n      >\n        <ng-container nzTreeNodeOutlet></ng-container>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [{\n        provide: CdkTree,\n        useExisting: NzTreeViewComponent\n      }, {\n        provide: NzTreeView,\n        useExisting: NzTreeViewComponent\n      }],\n      host: {\n        class: 'ant-tree',\n        '[class.ant-tree-block-node]': 'nzDirectoryTree || nzBlockNode',\n        '[class.ant-tree-directory]': 'nzDirectoryTree',\n        '[class.ant-tree-rtl]': `dir === 'rtl'`\n      },\n      animations: [treeCollapseMotion],\n      imports: [NzTreeNodeOutletDirective],\n      standalone: true\n    }]\n  }], null, {\n    nodeOutlet: [{\n      type: ViewChild,\n      args: [NzTreeNodeOutletDirective, {\n        static: true\n      }]\n    }]\n  });\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst DEFAULT_SIZE = 28;\nclass NzTreeVirtualScrollViewComponent extends NzTreeView {\n  constructor() {\n    super(...arguments);\n    this.nzItemSize = DEFAULT_SIZE;\n    this.nzMinBufferPx = DEFAULT_SIZE * 5;\n    this.nzMaxBufferPx = DEFAULT_SIZE * 10;\n    this.nodes = [];\n    this.innerTrackBy = i => i;\n  }\n  ngOnChanges(changes) {\n    if (changes.trackBy) {\n      if (typeof changes.trackBy.currentValue === 'function') {\n        this.innerTrackBy = (index, n) => this.trackBy(index, n.data);\n      } else {\n        this.innerTrackBy = i => i;\n      }\n    }\n  }\n  get compareBy() {\n    const baseTreeControl = this.treeControl;\n    if (baseTreeControl.trackBy) {\n      return baseTreeControl.trackBy;\n    }\n    return null;\n  }\n  renderNodeChanges(data) {\n    this.nodes = new Array(...data).map((n, i) => this.createNode(n, i));\n    this._dataSourceChanged.next();\n    this.changeDetectorRef.markForCheck();\n  }\n  createNode(nodeData, index) {\n    const node = this._getNodeDef(nodeData, index);\n    const context = new CdkTreeNodeOutletContext(nodeData);\n    if (this.treeControl.getLevel) {\n      context.level = this.treeControl.getLevel(nodeData);\n    } else {\n      context.level = 0;\n    }\n    return {\n      data: nodeData,\n      context,\n      nodeDef: node\n    };\n  }\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵNzTreeVirtualScrollViewComponent_BaseFactory;\n      return function NzTreeVirtualScrollViewComponent_Factory(t) {\n        return (ɵNzTreeVirtualScrollViewComponent_BaseFactory || (ɵNzTreeVirtualScrollViewComponent_BaseFactory = i0.ɵɵgetInheritedFactory(NzTreeVirtualScrollViewComponent)))(t || NzTreeVirtualScrollViewComponent);\n      };\n    })();\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NzTreeVirtualScrollViewComponent,\n      selectors: [[\"nz-tree-virtual-scroll-view\"]],\n      viewQuery: function NzTreeVirtualScrollViewComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(NzTreeNodeOutletDirective, 7);\n          i0.ɵɵviewQuery(CdkVirtualScrollViewport, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.virtualScrollViewport = _t.first);\n        }\n      },\n      hostAttrs: [1, \"ant-tree\"],\n      hostVars: 6,\n      hostBindings: function NzTreeVirtualScrollViewComponent_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"ant-tree-block-node\", ctx.nzDirectoryTree || ctx.nzBlockNode)(\"ant-tree-directory\", ctx.nzDirectoryTree)(\"ant-tree-rtl\", ctx.dir === \"rtl\");\n        }\n      },\n      inputs: {\n        nzItemSize: \"nzItemSize\",\n        nzMinBufferPx: \"nzMinBufferPx\",\n        nzMaxBufferPx: \"nzMaxBufferPx\",\n        trackBy: \"trackBy\"\n      },\n      exportAs: [\"nzTreeVirtualScrollView\"],\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NzTreeView,\n        useExisting: NzTreeVirtualScrollViewComponent\n      }, {\n        provide: CdkTree,\n        useExisting: NzTreeVirtualScrollViewComponent\n      }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n      decls: 4,\n      vars: 5,\n      consts: [[1, \"ant-tree-list\"], [1, \"ant-tree-list-holder\", 3, \"itemSize\", \"minBufferPx\", \"maxBufferPx\"], [4, \"cdkVirtualFor\", \"cdkVirtualForOf\", \"cdkVirtualForTrackBy\"], [\"nzTreeNodeOutlet\", \"\"], [\"nzTreeVirtualScrollNodeOutlet\", \"\", 3, \"data\", \"compareBy\"]],\n      template: function NzTreeVirtualScrollViewComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"cdk-virtual-scroll-viewport\", 1);\n          i0.ɵɵtemplate(2, NzTreeVirtualScrollViewComponent_ng_container_2_Template, 2, 2, \"ng-container\", 2);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementContainer(3, 3);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"itemSize\", ctx.nzItemSize)(\"minBufferPx\", ctx.nzMinBufferPx)(\"maxBufferPx\", ctx.nzMaxBufferPx);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"cdkVirtualForOf\", ctx.nodes)(\"cdkVirtualForTrackBy\", ctx.innerTrackBy);\n        }\n      },\n      dependencies: [NzTreeVirtualScrollNodeOutletDirective, CdkVirtualForOf, NzTreeNodeOutletDirective, CdkVirtualScrollViewport, CdkFixedSizeVirtualScroll],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeVirtualScrollViewComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-virtual-scroll-view',\n      exportAs: 'nzTreeVirtualScrollView',\n      template: `\n    <div class=\"ant-tree-list\">\n      <cdk-virtual-scroll-viewport\n        class=\"ant-tree-list-holder\"\n        [itemSize]=\"nzItemSize\"\n        [minBufferPx]=\"nzMinBufferPx\"\n        [maxBufferPx]=\"nzMaxBufferPx\"\n      >\n        <ng-container *cdkVirtualFor=\"let item of nodes; let i = index; trackBy: innerTrackBy\">\n          <ng-template nzTreeVirtualScrollNodeOutlet [data]=\"item\" [compareBy]=\"compareBy\"></ng-template>\n        </ng-container>\n      </cdk-virtual-scroll-viewport>\n    </div>\n    <ng-container nzTreeNodeOutlet></ng-container>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [{\n        provide: NzTreeView,\n        useExisting: NzTreeVirtualScrollViewComponent\n      }, {\n        provide: CdkTree,\n        useExisting: NzTreeVirtualScrollViewComponent\n      }],\n      host: {\n        class: 'ant-tree',\n        '[class.ant-tree-block-node]': 'nzDirectoryTree || nzBlockNode',\n        '[class.ant-tree-directory]': 'nzDirectoryTree',\n        '[class.ant-tree-rtl]': `dir === 'rtl'`\n      },\n      imports: [NzTreeVirtualScrollNodeOutletDirective, CdkVirtualForOf, NzTreeNodeOutletDirective, CdkVirtualScrollViewport, CdkFixedSizeVirtualScroll],\n      standalone: true\n    }]\n  }], null, {\n    nodeOutlet: [{\n      type: ViewChild,\n      args: [NzTreeNodeOutletDirective, {\n        static: true\n      }]\n    }],\n    virtualScrollViewport: [{\n      type: ViewChild,\n      args: [CdkVirtualScrollViewport, {\n        static: true\n      }]\n    }],\n    nzItemSize: [{\n      type: Input\n    }],\n    nzMinBufferPx: [{\n      type: Input\n    }],\n    nzMaxBufferPx: [{\n      type: Input\n    }],\n    trackBy: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst treeWithControlComponents = [NzTreeView, NzTreeNodeOutletDirective, NzTreeViewComponent, NzTreeNodeDefDirective, NzTreeNodeComponent, NzTreeNodeToggleDirective, NzTreeNodePaddingDirective, NzTreeNodeToggleRotateIconDirective, NzTreeNodeToggleActiveIconDirective, NzTreeNodeOptionComponent, NzTreeNodeNoopToggleDirective, NzTreeNodeCheckboxComponent, NzTreeNodeIndentsComponent, NzTreeVirtualScrollViewComponent, NzTreeVirtualScrollNodeOutletDirective, NzTreeNodeIndentLineDirective];\nclass NzTreeViewModule {\n  static {\n    this.ɵfac = function NzTreeViewModule_Factory(t) {\n      return new (t || NzTreeViewModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NzTreeViewModule,\n      imports: [NzTreeView, NzTreeNodeOutletDirective, NzTreeViewComponent, NzTreeNodeDefDirective, NzTreeNodeComponent, NzTreeNodeToggleDirective, NzTreeNodePaddingDirective, NzTreeNodeToggleRotateIconDirective, NzTreeNodeToggleActiveIconDirective, NzTreeNodeOptionComponent, NzTreeNodeNoopToggleDirective, NzTreeNodeCheckboxComponent, NzTreeNodeIndentsComponent, NzTreeVirtualScrollViewComponent, NzTreeVirtualScrollNodeOutletDirective, NzTreeNodeIndentLineDirective],\n      exports: [NzTreeView, NzTreeNodeOutletDirective, NzTreeViewComponent, NzTreeNodeDefDirective, NzTreeNodeComponent, NzTreeNodeToggleDirective, NzTreeNodePaddingDirective, NzTreeNodeToggleRotateIconDirective, NzTreeNodeToggleActiveIconDirective, NzTreeNodeOptionComponent, NzTreeNodeNoopToggleDirective, NzTreeNodeCheckboxComponent, NzTreeNodeIndentsComponent, NzTreeVirtualScrollViewComponent, NzTreeVirtualScrollNodeOutletDirective, NzTreeNodeIndentLineDirective]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [NzTreeVirtualScrollViewComponent]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzTreeViewModule, [{\n    type: NgModule,\n    args: [{\n      imports: [treeWithControlComponents],\n      exports: [treeWithControlComponents]\n    }]\n  }], null, null);\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeFlattener {\n  constructor(transformFunction, getLevel, isExpandable, getChildren) {\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n  flattenNode(node, level, resultNodes, parentMap) {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this.flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this.flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n  flattenChildren(children, level, resultNodes, parentMap) {\n    children.forEach((child, index) => {\n      const childParentMap = parentMap.slice();\n      childParentMap.push(index !== children.length - 1);\n      this.flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData) {\n    const resultNodes = [];\n    structuredData.forEach(node => this.flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes, treeControl) {\n    const results = [];\n    const currentExpand = [];\n    currentExpand[0] = true;\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\nclass NzTreeFlatDataSource extends DataSource {\n  constructor(_treeControl, _treeFlattener, initialData = []) {\n    super();\n    this._treeControl = _treeControl;\n    this._treeFlattener = _treeFlattener;\n    this._flattenedData = new BehaviorSubject([]);\n    this._expandedData = new BehaviorSubject([]);\n    this._data = new BehaviorSubject(initialData);\n    this.flatNodes();\n  }\n  setData(value) {\n    this._data.next(value);\n    this.flatNodes();\n  }\n  getData() {\n    return this._data.getValue();\n  }\n  connect(collectionViewer) {\n    const changes = [collectionViewer.viewChange, this._treeControl.expansionModel.changed.asObservable(), this._flattenedData.asObservable()];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n  disconnect() {\n    // no op\n  }\n  flatNodes() {\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.getData()));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n}\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzTreeFlatDataSource, NzTreeFlattener, NzTreeNodeCheckboxComponent, NzTreeNodeComponent, NzTreeNodeDefDirective, NzTreeNodeIndentLineDirective, NzTreeNodeIndentsComponent, NzTreeNodeNoopToggleDirective, NzTreeNodeOptionComponent, NzTreeNodeOutletDirective, NzTreeNodePaddingDirective, NzTreeNodeToggleActiveIconDirective, NzTreeNodeToggleDirective, NzTreeNodeToggleRotateIconDirective, NzTreeView, NzTreeViewComponent, NzTreeViewModule, NzTreeVirtualScrollNodeOutletDirective, NzTreeVirtualScrollViewComponent, getNextSibling, getParent };\n"],
  "mappings": "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",
  "names": ["items"]
}
